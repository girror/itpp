=============================
   Testing Vec<bin> (bvec)
=============================
a = [0 0 1 1 0 1 0 1 0 0]
b = [1 1 0 0 1 1 0 0 0 0]
c = 0
a+b = [1 1 1 1 1 0 0 1 0 0]
a+c = [0 0 1 1 0 1 0 1 0 0]
c+a = [0 0 1 1 0 1 0 1 0 0]
a+=b; a = [1 1 1 1 1 0 0 1 0 0]
a+=c; a = [0 0 1 1 0 1 0 1 0 0]
a-b = [1 1 1 1 1 0 0 1 0 0]
a-c = [0 0 1 1 0 1 0 1 0 0]
c-a = [0 0 1 1 0 1 0 1 0 0]
a-=b; a = [1 1 1 1 1 0 0 1 0 0]
a-=c; a = [0 0 1 1 0 1 0 1 0 0]
-a = [0 0 1 1 0 1 0 1 0 0]
a*b = 1
dot(a,b) = 1
outer_product(a,b) = [[0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0]
 [1 1 0 0 1 1 0 0 0 0]
 [1 1 0 0 1 1 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0]
 [1 1 0 0 1 1 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0]
 [1 1 0 0 1 1 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0]]
a*c = [0 0 0 0 0 0 0 0 0 0]
c*a = [0 0 0 0 0 0 0 0 0 0]
a*=c; a = [0 0 0 0 0 0 0 0 0 0]
elem_mult(a,b) = [0 0 0 0 0 1 0 0 0 0]
elem_mult_out(a,b,x); x = [0 0 0 0 0 1 0 0 0 0]
elem_mult_inplace(a,b); b = [0 0 0 0 0 1 0 0 0 0]
elem_mult_sum(a,b) = 1
a/c = [0 0 1 1 0 1 0 1 0 0]
c/a = [0 0 1 1 0 1 0 1 0 0]
a/=c; a = [0 0 1 1 0 1 0 1 0 0]
a/=b; a = [1 1 1 1 1 1 0 1 0 0]
elem_div(a,b) = [1 1 1 1 1 1 0 1 0 0]
elem_div_out(a,b,x); x = [1 1 1 1 1 1 0 1 0 0]
elem_div_sum(a,b) = 1
concat(a,b) = [0 0 1 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 0 0]
concat(a,c) = [0 0 1 1 0 1 0 1 0 0 0]
concat(c,a) = [0 0 0 1 1 0 1 0 1 0 0]
concat(a,b,a) = [0 0 1 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 1 1 0 1 0 1 0 0]
concat(a,b,a,b) = [0 0 1 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 1 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 0 0]
concat(a,b,a,b,a) = [0 0 1 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 1 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 1 1 0 1 0 1 0 0]
a.T() = [[0 0 1 1 0 1 0 1 0 0]]
a.H() = [[0 0 1 1 0 1 0 1 0 0]]
a.size() = 10
a.set_size(a.size()+3, true); a = [0 0 1 1 0 1 0 1 0 0 0 0 0]
a.set_size(a.size()-6, true); a = [0 0 1 1 0 1 0]
a(5) = 1
a.get(5) = 1
a(0,5) = [0 0 1 1 0 1]
a.get(0,5) = [0 0 1 1 0 1]
a(6,-1) = [0 1 0 0]
idx_list = [0 5 6 7]
a(idx_list) = [0 1 0 1]
a.get(idx_list) = [0 1 0 1]
bin_list = [1 0 0 0 0 1 1 1 0 0]
a(bin_list) = [0 1 0 1]
a.get(bin_list) = [0 1 0 1]
a.right(3) = [1 0 0]
a.left(4) = [0 0 1 1]
a.mid(3,2) = [1 0]
a.split(0) = [];   a = [0 0 1 1 0 1 0 1 0 0]
a.split(a.size()) = [0 0 1 1 0 1 0 1 0 0];   a = []
a.split(4) = [0 0 1 1];   a = [0 1 0 1 0 0]
a(5) = a(6); a = [0 1 0 1 0 0]
a.shift_left(c,2) = [1 1 0 1 0 1 0 0 0 0]
a.shift_right(c) = [0 0 0 1 1 0 1 0 1 0]
a.shift_left(b.mid(0,2)) = [1 1 0 1 0 1 0 0 1 1]
a.shift_right(b.right(5)) = [1 0 0 0 0 0 0 1 1 0]
a.set_subvector(0, b) = [1 1 0 0 1 1 0 0 0 0]
a.set_subvector(4, b(3,5)) = [0 0 1 1 0 1 1 1 0 0]
a.replace_mid(4, b(3,5)) = [0 0 1 1 0 1 1 1 0 0]
a.del(6) = [0 0 1 1 0 1 1 0 0]
a.del(3,9) = [0 0 1]
a.ins(0,c) = [0 0 0 1 1 0 1 0 1 0 0]
a.ins(2,c) = [0 0 0 1 1 0 1 0 1 0 0]
a.ins(10,c) = [0 0 1 1 0 1 0 1 0 0 0]
a.ins(3, b(0,2)) = [0 0 1 1 1 0 1 0 1 0 1 0 0]
a.zeros(); a = [0 0 0 0 0 0 0 0 0 0]
a.ones(); a = [1 1 1 1 1 1 1 1 1 1]
a = c; a = [0 0 0 0 0 0 0 0 0 0]
a = b(0,4); a = [1 1 0 0 1]
a = b.T(); a = [1 1 0 0 1 1 0 0 0 0]
a = b.T().T(); a = [1 1 0 0 1 1 0 0 0 0]

(a == c) = [1 1 0 0 1 0 1 0 1 1]
(a != c) = [0 0 1 1 0 1 0 1 0 0]
(a <= c) = [1 1 0 0 1 0 1 0 1 1]
(a >= c) = [1 1 1 1 1 1 1 1 1 1]
(a < c) = [0 0 0 0 0 0 0 0 0 0]
(a > c) = [0 0 1 1 0 1 0 1 0 0]
(a == b) = 0
(a != b) = 1
a2 = a; (a2 == a) = 1
a2 = a; (a2 != a) = 0

=============================
   Testing Vec<int> (ivec)
=============================
a = [1 5 4 5 9 7 9 5 6 4]
b = [5 6 2 1 3 5 9 2 2 3]
c = 8
a+b = [6 11 6 6 12 12 18 7 8 7]
a+c = [9 13 12 13 17 15 17 13 14 12]
c+a = [9 13 12 13 17 15 17 13 14 12]
a+=b; a = [6 11 6 6 12 12 18 7 8 7]
a+=c; a = [9 13 12 13 17 15 17 13 14 12]
a-b = [-4 -1 2 4 6 2 0 3 4 1]
a-c = [-7 -3 -4 -3 1 -1 1 -3 -2 -4]
c-a = [7 3 4 3 -1 1 -1 3 2 4]
a-=b; a = [-4 -1 2 4 6 2 0 3 4 1]
a-=c; a = [-7 -3 -4 -3 1 -1 1 -3 -2 -4]
-a = [-1 -5 -4 -5 -9 -7 -9 -5 -6 -4]
a*b = 225
dot(a,b) = 225
outer_product(a,b) = [[5 6 2 1 3 5 9 2 2 3]
 [25 30 10 5 15 25 45 10 10 15]
 [20 24 8 4 12 20 36 8 8 12]
 [25 30 10 5 15 25 45 10 10 15]
 [45 54 18 9 27 45 81 18 18 27]
 [35 42 14 7 21 35 63 14 14 21]
 [45 54 18 9 27 45 81 18 18 27]
 [25 30 10 5 15 25 45 10 10 15]
 [30 36 12 6 18 30 54 12 12 18]
 [20 24 8 4 12 20 36 8 8 12]]
a*c = [8 40 32 40 72 56 72 40 48 32]
c*a = [8 40 32 40 72 56 72 40 48 32]
a*=c; a = [8 40 32 40 72 56 72 40 48 32]
elem_mult(a,b) = [5 30 8 5 27 35 81 10 12 12]
elem_mult_out(a,b,x); x = [5 30 8 5 27 35 81 10 12 12]
elem_mult_inplace(a,b); b = [5 30 8 5 27 35 81 10 12 12]
elem_mult_sum(a,b) = 225
a/c = [0 0 0 0 1 0 1 0 0 0]
c/a = [8 1 2 1 0 1 0 1 1 2]
a/=c; a = [0 0 0 0 1 0 1 0 0 0]
a/=b; a = [0 0 2 5 3 1 1 2 3 1]
elem_div(a,b) = [0 0 2 5 3 1 1 2 3 1]
elem_div_out(a,b,x); x = [0 0 2 5 3 1 1 2 3 1]
elem_div_sum(a,b) = 18
concat(a,b) = [1 5 4 5 9 7 9 5 6 4 5 6 2 1 3 5 9 2 2 3]
concat(a,c) = [1 5 4 5 9 7 9 5 6 4 8]
concat(c,a) = [8 1 5 4 5 9 7 9 5 6 4]
concat(a,b,a) = [1 5 4 5 9 7 9 5 6 4 5 6 2 1 3 5 9 2 2 3 1 5 4 5 9 7 9 5 6 4]
concat(a,b,a,b) = [1 5 4 5 9 7 9 5 6 4 5 6 2 1 3 5 9 2 2 3 1 5 4 5 9 7 9 5 6 4 5 6 2 1 3 5 9 2 2 3]
concat(a,b,a,b,a) = [1 5 4 5 9 7 9 5 6 4 5 6 2 1 3 5 9 2 2 3 1 5 4 5 9 7 9 5 6 4 5 6 2 1 3 5 9 2 2 3 1 5 4 5 9 7 9 5 6 4]
a.T() = [[1 5 4 5 9 7 9 5 6 4]]
a.H() = [[1 5 4 5 9 7 9 5 6 4]]
a.size() = 10
a.set_size(a.size()+3, true); a = [1 5 4 5 9 7 9 5 6 4 0 0 0]
a.set_size(a.size()-6, true); a = [1 5 4 5 9 7 9]
a(5) = 7
a.get(5) = 7
a(0,5) = [1 5 4 5 9 7]
a.get(0,5) = [1 5 4 5 9 7]
a(6,-1) = [9 5 6 4]
idx_list = [0 5 6 7]
a(idx_list) = [1 7 9 5]
a.get(idx_list) = [1 7 9 5]
bin_list = [1 0 0 0 0 1 1 1 0 0]
a(bin_list) = [1 7 9 5]
a.get(bin_list) = [1 7 9 5]
a.right(3) = [5 6 4]
a.left(4) = [1 5 4 5]
a.mid(3,2) = [5 9]
a.split(0) = [];   a = [1 5 4 5 9 7 9 5 6 4]
a.split(a.size()) = [1 5 4 5 9 7 9 5 6 4];   a = []
a.split(4) = [1 5 4 5];   a = [9 7 9 5 6 4]
a(5) = a(6); a = [9 7 9 5 6 9]
a.shift_left(c,2) = [4 5 9 7 9 5 6 4 8 8]
a.shift_right(c) = [8 1 5 4 5 9 7 9 5 6]
a.shift_left(b.mid(0,2)) = [4 5 9 7 9 5 6 4 5 6]
a.shift_right(b.right(5)) = [5 9 2 2 3 1 5 4 5 9]
a.set_subvector(0, b) = [5 6 2 1 3 5 9 2 2 3]
a.set_subvector(4, b(3,5)) = [1 5 4 5 1 3 5 5 6 4]
a.replace_mid(4, b(3,5)) = [1 5 4 5 1 3 5 5 6 4]
a.del(6) = [1 5 4 5 9 7 5 6 4]
a.del(3,9) = [1 5 4]
a.ins(0,c) = [8 1 5 4 5 9 7 9 5 6 4]
a.ins(2,c) = [1 5 8 4 5 9 7 9 5 6 4]
a.ins(10,c) = [1 5 4 5 9 7 9 5 6 4 8]
a.ins(3, b(0,2)) = [1 5 4 5 6 2 5 9 7 9 5 6 4]
a.zeros(); a = [0 0 0 0 0 0 0 0 0 0]
a.ones(); a = [1 1 1 1 1 1 1 1 1 1]
a = c; a = [8 8 8 8 8 8 8 8 8 8]
a = b(0,4); a = [5 6 2 1 3]
a = b.T(); a = [5 6 2 1 3 5 9 2 2 3]
a = b.T().T(); a = [5 6 2 1 3 5 9 2 2 3]

(a == c) = [0 0 0 0 0 0 0 0 0 0]
(a != c) = [1 1 1 1 1 1 1 1 1 1]
(a <= c) = [1 1 1 1 0 1 0 1 1 1]
(a >= c) = [0 0 0 0 1 0 1 0 0 0]
(a < c) = [1 1 1 1 0 1 0 1 1 1]
(a > c) = [0 0 0 0 1 0 1 0 0 0]
(a == b) = 0
(a != b) = 1
a2 = a; (a2 == a) = 1
a2 = a; (a2 != a) = 0

===============================
   Testing Vec<double> (vec)
===============================
a = [0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429]
b = [0.7639 0.9206 0.4387 0.0171 0.2157 0.7483 0.7626 0.1179 0.4272 0.1790]
c = 0.9167
a+b = [0.7820 0.9445 1.0516 0.7621 0.6376 0.8981 1.4784 1.0168 0.4520 0.7219]
a+c = [0.9348 0.9406 1.5296 1.6617 1.3386 1.0665 1.6324 1.8156 0.9415 1.4596]
c+a = [0.9348 0.9406 1.5296 1.6617 1.3386 1.0665 1.6324 1.8156 0.9415 1.4596]
a+=b; a = [0.7820 0.9445 1.0516 0.7621 0.6376 0.8981 1.4784 1.0168 0.4520 0.7219]
a+=c; a = [0.9348 0.9406 1.5296 1.6617 1.3386 1.0665 1.6324 1.8156 0.9415 1.4596]
a-b = [-0.7458 -0.8966 0.1742 0.7278 0.2062 -0.5984 -0.0468 0.7811 -0.4024 0.3640]
a-c = [-0.8986 -0.8927 -0.3038 -0.1717 -0.4948 -0.7668 -0.2009 -0.0178 -0.8919 -0.3738]
c-a = [0.8986 0.8927 0.3038 0.1717 0.4948 0.7668 0.2009 0.0178 0.8919 0.3738]
a-=b; a = [-0.7458 -0.8966 0.1742 0.7278 0.2062 -0.5984 -0.0468 0.7811 -0.4024 0.3640]
a-=c; a = [-0.8986 -0.8927 -0.3038 -0.1717 -0.4948 -0.7668 -0.2009 -0.0178 -0.8919 -0.3738]
-a = [-0.0181 -0.0240 -0.6129 -0.7450 -0.4219 -0.1498 -0.7158 -0.8989 -0.0248 -0.5429]
a*b = 1.2802
dot(a,b) = 1.2802
outer_product(a,b) = [[0.0138 0.0167 0.0079 0.0003 0.0039 0.0136 0.0138 0.0021 0.0077 0.0032]
 [0.0183 0.0221 0.0105 0.0004 0.0052 0.0179 0.0183 0.0028 0.0102 0.0043]
 [0.4682 0.5642 0.2689 0.0105 0.1322 0.4586 0.4674 0.0722 0.2618 0.1097]
 [0.5691 0.6858 0.3268 0.0128 0.1607 0.5575 0.5681 0.0878 0.3182 0.1333]
 [0.3223 0.3884 0.1851 0.0072 0.0910 0.3157 0.3218 0.0497 0.1802 0.0755]
 [0.1145 0.1379 0.0657 0.0026 0.0323 0.1121 0.1143 0.0177 0.0640 0.0268]
 [0.5468 0.6589 0.3140 0.0123 0.1544 0.5356 0.5458 0.0844 0.3058 0.1281]
 [0.6867 0.8275 0.3943 0.0154 0.1939 0.6726 0.6855 0.1059 0.3840 0.1609]
 [0.0189 0.0228 0.0109 0.0004 0.0053 0.0185 0.0189 0.0029 0.0106 0.0044]
 [0.4148 0.4998 0.2382 0.0093 0.1171 0.4063 0.4140 0.0640 0.2319 0.0972]]
a*c = [0.0166 0.0220 0.5618 0.6829 0.3868 0.1373 0.6561 0.8240 0.0227 0.4977]
c*a = [0.0166 0.0220 0.5618 0.6829 0.3868 0.1373 0.6561 0.8240 0.0227 0.4977]
a*=c; a = [0.0166 0.0220 0.5618 0.6829 0.3868 0.1373 0.6561 0.8240 0.0227 0.4977]
elem_mult(a,b) = [0.0138 0.0221 0.2689 0.0128 0.0910 0.1121 0.5458 0.1059 0.0106 0.0972]
elem_mult_out(a,b,x); x = [0.0138 0.0221 0.2689 0.0128 0.0910 0.1121 0.5458 0.1059 0.0106 0.0972]
elem_mult_inplace(a,b); b = [0.0138 0.0221 0.2689 0.0128 0.0910 0.1121 0.5458 0.1059 0.0106 0.0972]
elem_mult_sum(a,b) = 1.2802
a/c = [0.0198 0.0261 0.6686 0.8127 0.4603 0.1635 0.7808 0.9806 0.0270 0.5923]
c/a = [50.6102 38.2470 1.4956 1.2305 2.1726 6.1179 1.2807 1.0198 36.9849 1.6884]
a/=c; a = [0.0198 0.0261 0.6686 0.8127 0.4603 0.1635 0.7808 0.9806 0.0270 0.5923]
a/=b; a = [0.0237 0.0260 1.3971 43.4708 1.9560 0.2002 0.9386 7.6271 0.0580 3.0338]
elem_div(a,b) = [0.0237 0.0260 1.3971 43.4708 1.9560 0.2002 0.9386 7.6271 0.0580 3.0338]
elem_div_out(a,b,x); x = [0.0237 0.0260 1.3971 43.4708 1.9560 0.2002 0.9386 7.6271 0.0580 3.0338]
elem_div_sum(a,b) = 58.7313
concat(a,b) = [0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429 0.7639 0.9206 0.4387 0.0171 0.2157 0.7483 0.7626 0.1179 0.4272 0.1790]
concat(a,c) = [0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429 0.9167]
concat(c,a) = [0.9167 0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429]
concat(a,b,a) = [0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429 0.7639 0.9206 0.4387 0.0171 0.2157 0.7483 0.7626 0.1179 0.4272 0.1790 0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429]
concat(a,b,a,b) = [0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429 0.7639 0.9206 0.4387 0.0171 0.2157 0.7483 0.7626 0.1179 0.4272 0.1790 0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429 0.7639 0.9206 0.4387 0.0171 0.2157 0.7483 0.7626 0.1179 0.4272 0.1790]
concat(a,b,a,b,a) = [0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429 0.7639 0.9206 0.4387 0.0171 0.2157 0.7483 0.7626 0.1179 0.4272 0.1790 0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429 0.7639 0.9206 0.4387 0.0171 0.2157 0.7483 0.7626 0.1179 0.4272 0.1790 0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429]
a.T() = [[0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429]]
a.H() = [[0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429]]
a.size() = 10
a.set_size(a.size()+3, true); a = [0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429 0.0000 0.0000 0.0000]
a.set_size(a.size()-6, true); a = [0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158]
a(5) = 0.1498
a.get(5) = 0.1498
a(0,5) = [0.0181 0.0240 0.6129 0.7450 0.4219 0.1498]
a.get(0,5) = [0.0181 0.0240 0.6129 0.7450 0.4219 0.1498]
a(6,-1) = [0.7158 0.8989 0.0248 0.5429]
idx_list = [0 5 6 7]
a(idx_list) = [0.0181 0.1498 0.7158 0.8989]
a.get(idx_list) = [0.0181 0.1498 0.7158 0.8989]
bin_list = [1 0 0 0 0 1 1 1 0 0]
a(bin_list) = [0.0181 0.1498 0.7158 0.8989]
a.get(bin_list) = [0.0181 0.1498 0.7158 0.8989]
a.right(3) = [0.8989 0.0248 0.5429]
a.left(4) = [0.0181 0.0240 0.6129 0.7450]
a.mid(3,2) = [0.7450 0.4219]
a.split(0) = [];   a = [0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429]
a.split(a.size()) = [0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429];   a = []
a.split(4) = [0.0181 0.0240 0.6129 0.7450];   a = [0.4219 0.1498 0.7158 0.8989 0.0248 0.5429]
a(5) = a(6); a = [0.4219 0.1498 0.7158 0.8989 0.0248 0.7158]
a.shift_left(c,2) = [0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429 0.9167 0.9167]
a.shift_right(c) = [0.9167 0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248]
a.shift_left(b.mid(0,2)) = [0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429 0.7639 0.9206]
a.shift_right(b.right(5)) = [0.7483 0.7626 0.1179 0.4272 0.1790 0.0181 0.0240 0.6129 0.7450 0.4219]
a.set_subvector(0, b) = [0.7639 0.9206 0.4387 0.0171 0.2157 0.7483 0.7626 0.1179 0.4272 0.1790]
a.set_subvector(4, b(3,5)) = [0.0181 0.0240 0.6129 0.7450 0.0171 0.2157 0.7483 0.8989 0.0248 0.5429]
a.replace_mid(4, b(3,5)) = [0.0181 0.0240 0.6129 0.7450 0.0171 0.2157 0.7483 0.8989 0.0248 0.5429]
a.del(6) = [0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.8989 0.0248 0.5429]
a.del(3,9) = [0.0181 0.0240 0.6129]
a.ins(0,c) = [0.9167 0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429]
a.ins(2,c) = [0.0181 0.0240 0.9167 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429]
a.ins(10,c) = [0.0181 0.0240 0.6129 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429 0.9167]
a.ins(3, b(0,2)) = [0.0181 0.0240 0.6129 0.7639 0.9206 0.4387 0.7450 0.4219 0.1498 0.7158 0.8989 0.0248 0.5429]
a.zeros(); a = [0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000]
a.ones(); a = [1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000]
a = c; a = [0.9167 0.9167 0.9167 0.9167 0.9167 0.9167 0.9167 0.9167 0.9167 0.9167]
a = b(0,4); a = [0.7639 0.9206 0.4387 0.0171 0.2157]
a = b.T(); a = [0.7639 0.9206 0.4387 0.0171 0.2157 0.7483 0.7626 0.1179 0.4272 0.1790]
a = b.T().T(); a = [0.7639 0.9206 0.4387 0.0171 0.2157 0.7483 0.7626 0.1179 0.4272 0.1790]

(a == c) = [0 0 0 0 0 0 0 0 0 0]
(a != c) = [1 1 1 1 1 1 1 1 1 1]
(a <= c) = [1 1 1 1 1 1 1 1 1 1]
(a >= c) = [0 0 0 0 0 0 0 0 0 0]
(a < c) = [1 1 1 1 1 1 1 1 1 1]
(a > c) = [0 0 0 0 0 0 0 0 0 0]
(a == b) = 0
(a != b) = 1
a2 = a; (a2 == a) = 1
a2 = a; (a2 != a) = 0

===============================================
   Testing Vec<std::complex<double> > (cvec)
===============================================
a = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i]
b = [-0.2188-0.0820i -0.3517+0.2211i 0.6346+0.0873i -0.2980+0.2964i 0.9011-0.2325i 0.9642+0.8368i -0.4773-0.6376i -1.2489+0.3396i 0.0235-0.1815i -0.8631+0.6211i]
c = -0.3598+0.6133i
a+b = [0.2469-0.6897i -0.2984+0.0994i -0.2142-1.2018i 0.2650+0.2273i 0.0789+0.7208i 0.8361+1.1151i 0.1213-0.8282i -1.3793+0.4171i -0.1624-0.8460i -0.5362+1.2215i]
a+c = [0.1059+0.0056i -0.3065+0.4917i -1.2086-0.6757i 0.2032+0.5442i -1.1819+1.5666i -0.4878+0.8916i 0.2388+0.4227i -0.4902+0.6909i -0.5457-0.0511i -0.0329+1.2138i]
c+a = [0.1059+0.0056i -0.3065+0.4917i -1.2086-0.6757i 0.2032+0.5442i -1.1819+1.5666i -0.4878+0.8916i 0.2388+0.4227i -0.4902+0.6909i -0.5457-0.0511i -0.0329+1.2138i]
a+=b; a = [0.2469-0.6897i -0.2984+0.0994i -0.2142-1.2018i 0.2650+0.2273i 0.0789+0.7208i 0.8361+1.1151i 0.1213-0.8282i -1.3793+0.4171i -0.1624-0.8460i -0.5362+1.2215i]
a+=c; a = [0.1059+0.0056i -0.3065+0.4917i -1.2086-0.6757i 0.2032+0.5442i -1.1819+1.5666i -0.4878+0.8916i 0.2388+0.4227i -0.4902+0.6909i -0.5457-0.0511i -0.0329+1.2138i]
a-b = [0.6844-0.5257i 0.4051-0.3427i -1.4833-1.3763i 0.8609-0.3654i -1.7232+1.1858i -1.0922-0.5585i 1.0759+0.4470i 1.1185-0.2620i -0.2094-0.4829i 1.1899-0.0206i]
a-c = [0.8254-1.2210i 0.4131-0.7350i -0.4890-1.9024i 0.9228-0.6824i -0.4624+0.3400i 0.2317-0.3350i 0.9584-0.8039i 0.2294-0.5358i 0.1738-1.2778i 0.6866-0.0129i]
c-a = [-0.8254+1.2210i -0.4131+0.7350i 0.4890+1.9024i -0.9228+0.6824i 0.4624-0.3400i -0.2317+0.3350i -0.9584+0.8039i -0.2294+0.5358i -0.1738+1.2778i -0.6866+0.0129i]
a-=b; a = [0.6844-0.5257i 0.4051-0.3427i -1.4833-1.3763i 0.8609-0.3654i -1.7232+1.1858i -1.0922-0.5585i 1.0759+0.4470i 1.1185-0.2620i -0.2094-0.4829i 1.1899-0.0206i]
a-=c; a = [0.8254-1.2210i 0.4131-0.7350i -0.4890-1.9024i 0.9228-0.6824i -0.4624+0.3400i 0.2317-0.3350i 0.9584-0.8039i 0.2294-0.5358i 0.1738-1.2778i 0.6866-0.0129i]
-a = [-0.4656+0.6077i -0.0533+0.1216i 0.8488+1.2890i -0.5630+0.0691i 0.8221-0.9533i 0.1281-0.2783i -0.5986+0.1906i 0.1304-0.0776i 0.1859+0.6645i -0.3269-0.6004i]
a*b = -2.6432-0.0729i
dot(a,b) = -2.6432-0.0729i
outer_product(a,b) = [[-0.1517+0.0948i -0.0295+0.3167i 0.3485-0.3450i 0.0414+0.3191i 0.2783-0.6558i 0.9575-0.1963i -0.6097-0.0068i -0.3752+0.9171i -0.0994-0.0988i -0.0245+0.8137i]
 [-0.0216+0.0222i 0.0081+0.0546i 0.0444-0.0725i 0.0202+0.0520i 0.0198-0.1220i 0.1532-0.0727i -0.1030+0.0241i -0.0253+0.1700i -0.0208-0.0125i 0.0295+0.1381i]
 [0.0800+0.3516i 0.5835+0.2658i -0.4261-0.8920i 0.6349+0.1325i -1.0645-0.9641i 0.2603-1.9531i -0.4167+1.1564i 1.4978+1.3217i -0.2539+0.1238i 1.5331+0.5854i]
 [-0.1288-0.0311i -0.1828+0.1488i 0.3633+0.0053i -0.1473+0.1874i 0.4912-0.1932i 0.6006+0.4045i -0.3128-0.3260i -0.6797+0.2775i 0.0007-0.1038i -0.4430+0.4093i]
 [0.2581-0.1411i 0.0785-0.5170i -0.6049+0.5332i -0.0376-0.5277i -0.5191+1.0501i -1.5904+0.2312i 1.0002+0.0692i 0.7031-1.4698i 0.1537+0.1716i 0.1175-1.3334i]
 [0.0508-0.0504i -0.0165-0.1262i -0.1056+0.1654i -0.0443-0.1209i -0.0507+0.2806i -0.3564+0.1612i 0.2386-0.0512i 0.0654-0.3911i 0.0475+0.0298i -0.0623-0.3197i]
 [-0.1466-0.0074i -0.1684+0.1994i 0.3965-0.0687i -0.1219+0.2342i 0.4950-0.3109i 0.7367+0.3171i -0.4072-0.2907i -0.6829+0.4413i -0.0205-0.1131i -0.3982+0.5363i]
 [0.0349-0.0063i 0.0287-0.0561i -0.0895+0.0378i 0.0159-0.0618i -0.0995+0.1002i -0.1906-0.0344i 0.1117+0.0461i 0.1365-0.1411i 0.0110+0.0255i 0.0644-0.1479i]
 [-0.0138+0.1606i 0.2123+0.1926i -0.0600-0.4379i 0.2523+0.1429i -0.3220-0.5555i 0.3768-0.7962i -0.3349+0.4357i 0.4578+0.7667i -0.1250+0.0181i 0.5731+0.4580i]
 [-0.0223-0.1582i -0.2477-0.1389i 0.1550+0.4095i -0.2753-0.0820i 0.4341+0.4650i -0.1873+0.8524i 0.2268-0.4950i -0.6121-0.6389i 0.1167-0.0452i -0.6550-0.3152i]]
a*c = [0.2052+0.5042i 0.0554+0.0765i 1.0960-0.0568i -0.1602+0.3702i -0.2889-0.8472i -0.1246-0.1787i -0.0984+0.4357i -0.0006-0.1079i 0.4744+0.1250i -0.4859-0.0156i]
c*a = [0.2052+0.5042i 0.0554+0.0765i 1.0960-0.0568i -0.1602+0.3702i -0.2889-0.8472i -0.1246-0.1787i -0.0984+0.4357i -0.0006-0.1079i 0.4744+0.1250i -0.4859-0.0156i]
a*=c; a = [0.2052+0.5042i 0.0554+0.0765i 1.0960-0.0568i -0.1602+0.3702i -0.2889-0.8472i -0.1246-0.1787i -0.0984+0.4357i -0.0006-0.1079i 0.4744+0.1250i -0.4859-0.0156i]
elem_mult(a,b) = [-0.1517+0.0948i 0.0081+0.0546i -0.4261-0.8920i -0.1473+0.1874i -0.5191+1.0501i -0.3564+0.1612i -0.4072-0.2907i 0.1365-0.1411i -0.1250+0.0181i -0.6550-0.3152i]
elem_mult_out(a,b,x); x = [-0.1517+0.0948i 0.0081+0.0546i -0.4261-0.8920i -0.1473+0.1874i -0.5191+1.0501i -0.3564+0.1612i -0.4072-0.2907i 0.1365-0.1411i -0.1250+0.0181i -0.6550-0.3152i]
elem_mult_inplace(a,b); b = [-0.1517+0.0948i 0.0081+0.0546i -0.4261-0.8920i -0.1473+0.1874i -0.5191+1.0501i -0.3564+0.1612i -0.4072-0.2907i 0.1365-0.1411i -0.1250+0.0181i -0.6550-0.3152i]
elem_mult_sum(a,b) = -2.6432-0.0729i
a/c = [-1.0685-0.1324i -0.1855+0.0219i -0.9597+1.9468i -0.4844-0.6338i 1.7414+0.3190i 0.4287-0.0427i -0.6572-0.5905i 0.1869+0.1030i -0.6737+0.6983i 0.4958-0.8237i]
c/a = [-0.9217+0.1142i -5.3173-0.6272i -0.2037-0.4132i -0.7613+0.9960i 0.5556-0.1018i 2.3096+0.2299i -0.8419+0.7565i 4.1042-2.2623i -0.7155-0.7417i 0.5364+0.8912i]
a/=c; a = [-1.0685-0.1324i -0.1855+0.0219i -0.9597+1.9468i -0.4844-0.6338i 1.7414+0.3190i 0.4287-0.0427i -0.6572-0.5905i 0.1869+0.1030i -0.6737+0.6983i 0.4958-0.8237i]
a/=b; a = [-0.9532+3.1348i -0.2644+0.1796i -1.5869-1.8132i -1.0658-0.8282i -1.1114+0.7712i 0.0671+0.2304i -0.2588+0.7451i 0.1130-0.0314i 3.4702-1.4734i 0.0803-0.6379i]
elem_div(a,b) = [-0.9532+3.1348i -0.2644+0.1796i -1.5869-1.8132i -1.0658-0.8282i -1.1114+0.7712i 0.0671+0.2304i -0.2588+0.7451i 0.1130-0.0314i 3.4702-1.4734i 0.0803-0.6379i]
elem_div_out(a,b,x); x = [-0.9532+3.1348i -0.2644+0.1796i -1.5869-1.8132i -1.0658-0.8282i -1.1114+0.7712i 0.0671+0.2304i -0.2588+0.7451i 0.1130-0.0314i 3.4702-1.4734i 0.0803-0.6379i]
elem_div_sum(a,b) = -1.5100+0.2770i
concat(a,b) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i -0.2188-0.0820i -0.3517+0.2211i 0.6346+0.0873i -0.2980+0.2964i 0.9011-0.2325i 0.9642+0.8368i -0.4773-0.6376i -1.2489+0.3396i 0.0235-0.1815i -0.8631+0.6211i]
concat(a,c) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i -0.3598+0.6133i]
concat(c,a) = [-0.3598+0.6133i 0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i]
concat(a,b,a) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i -0.2188-0.0820i -0.3517+0.2211i 0.6346+0.0873i -0.2980+0.2964i 0.9011-0.2325i 0.9642+0.8368i -0.4773-0.6376i -1.2489+0.3396i 0.0235-0.1815i -0.8631+0.6211i 0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i]
concat(a,b,a,b) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i -0.2188-0.0820i -0.3517+0.2211i 0.6346+0.0873i -0.2980+0.2964i 0.9011-0.2325i 0.9642+0.8368i -0.4773-0.6376i -1.2489+0.3396i 0.0235-0.1815i -0.8631+0.6211i 0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i -0.2188-0.0820i -0.3517+0.2211i 0.6346+0.0873i -0.2980+0.2964i 0.9011-0.2325i 0.9642+0.8368i -0.4773-0.6376i -1.2489+0.3396i 0.0235-0.1815i -0.8631+0.6211i]
concat(a,b,a,b,a) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i -0.2188-0.0820i -0.3517+0.2211i 0.6346+0.0873i -0.2980+0.2964i 0.9011-0.2325i 0.9642+0.8368i -0.4773-0.6376i -1.2489+0.3396i 0.0235-0.1815i -0.8631+0.6211i 0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i -0.2188-0.0820i -0.3517+0.2211i 0.6346+0.0873i -0.2980+0.2964i 0.9011-0.2325i 0.9642+0.8368i -0.4773-0.6376i -1.2489+0.3396i 0.0235-0.1815i -0.8631+0.6211i 0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i]
a.T() = [[0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i]]
a.H() = [[0.4656+0.6077i 0.0533+0.1216i -0.8488+1.2890i 0.5630+0.0691i -0.8221-0.9533i -0.1281-0.2783i 0.5986+0.1906i -0.1304-0.0776i -0.1859+0.6645i 0.3269-0.6004i]]
a.size() = 10
a.set_size(a.size()+3, true); a = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i]
a.set_size(a.size()-6, true); a = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i]
a(5) = -0.1281+0.2783i
a.get(5) = -0.1281+0.2783i
a(0,5) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i]
a.get(0,5) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i]
a(6,-1) = [0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i]
idx_list = [0 5 6 7]
a(idx_list) = [0.4656-0.6077i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i]
a.get(idx_list) = [0.4656-0.6077i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i]
bin_list = [1 0 0 0 0 1 1 1 0 0]
a(bin_list) = [0.4656-0.6077i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i]
a.get(bin_list) = [0.4656-0.6077i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i]
a.right(3) = [-0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i]
a.left(4) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i]
a.mid(3,2) = [0.5630-0.0691i -0.8221+0.9533i]
a.split(0) = [];   a = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i]
a.split(a.size()) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i];   a = []
a.split(4) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i];   a = [-0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i]
a(5) = a(6); a = [-0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.5986-0.1906i]
a.shift_left(c,2) = [-0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i -0.3598+0.6133i -0.3598+0.6133i]
a.shift_right(c) = [-0.3598+0.6133i 0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i]
a.shift_left(b.mid(0,2)) = [-0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i -0.2188-0.0820i -0.3517+0.2211i]
a.shift_right(b.right(5)) = [0.9642+0.8368i -0.4773-0.6376i -1.2489+0.3396i 0.0235-0.1815i -0.8631+0.6211i 0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i]
a.set_subvector(0, b) = [-0.2188-0.0820i -0.3517+0.2211i 0.6346+0.0873i -0.2980+0.2964i 0.9011-0.2325i 0.9642+0.8368i -0.4773-0.6376i -1.2489+0.3396i 0.0235-0.1815i -0.8631+0.6211i]
a.set_subvector(4, b(3,5)) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.2980+0.2964i 0.9011-0.2325i 0.9642+0.8368i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i]
a.replace_mid(4, b(3,5)) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.2980+0.2964i 0.9011-0.2325i 0.9642+0.8368i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i]
a.del(6) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i]
a.del(3,9) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i]
a.ins(0,c) = [-0.3598+0.6133i 0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i]
a.ins(2,c) = [0.4656-0.6077i 0.0533-0.1216i -0.3598+0.6133i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i]
a.ins(10,c) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i -0.3598+0.6133i]
a.ins(3, b(0,2)) = [0.4656-0.6077i 0.0533-0.1216i -0.8488-1.2890i -0.2188-0.0820i -0.3517+0.2211i 0.6346+0.0873i 0.5630-0.0691i -0.8221+0.9533i -0.1281+0.2783i 0.5986-0.1906i -0.1304+0.0776i -0.1859-0.6645i 0.3269+0.6004i]
a.zeros(); a = [0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i]
a.ones(); a = [1.0000+0.0000i 1.0000+0.0000i 1.0000+0.0000i 1.0000+0.0000i 1.0000+0.0000i 1.0000+0.0000i 1.0000+0.0000i 1.0000+0.0000i 1.0000+0.0000i 1.0000+0.0000i]
a = c; a = [-0.3598+0.6133i -0.3598+0.6133i -0.3598+0.6133i -0.3598+0.6133i -0.3598+0.6133i -0.3598+0.6133i -0.3598+0.6133i -0.3598+0.6133i -0.3598+0.6133i -0.3598+0.6133i]
a = b(0,4); a = [-0.2188-0.0820i -0.3517+0.2211i 0.6346+0.0873i -0.2980+0.2964i 0.9011-0.2325i]
a = b.T(); a = [-0.2188-0.0820i -0.3517+0.2211i 0.6346+0.0873i -0.2980+0.2964i 0.9011-0.2325i 0.9642+0.8368i -0.4773-0.6376i -1.2489+0.3396i 0.0235-0.1815i -0.8631+0.6211i]
a = b.T().T(); a = [-0.2188-0.0820i -0.3517+0.2211i 0.6346+0.0873i -0.2980+0.2964i 0.9011-0.2325i 0.9642+0.8368i -0.4773-0.6376i -1.2489+0.3396i 0.0235-0.1815i -0.8631+0.6211i]

(a == c) = [0 0 0 0 0 0 0 0 0 0]
(a != c) = [1 1 1 1 1 1 1 1 1 1]

Testing double vector initialisation with: "23.3 1232.7 0.111 1.525 0.333":
v = [23.3000 1232.7000 0.1110 1.5250 0.3330]
Testing double vector initialisation with: "-10.000 :.5:-4.5  1.33e+1, -.9, 1e0:1.5:1E+1":
v = [-10.0000 -9.5000 -9.0000 -8.5000 -8.0000 -7.5000 -7.0000 -6.5000 -6.0000 -5.5000 -5.0000 -4.5000 13.3000 -0.9000 1.0000 2.5000 4.0000 5.5000 7.0000 8.5000 10.0000]
Testing int vector initialisation with: "0xA :-0x1: -010":
iv = [10 9 8 7 6 5 4 3 2 1 0 -1 -2 -3 -4 -5 -6 -7 -8]
Testing int vector initialisation with: "-5:3:9, 7, 1:10":
iv = [-5 -2 1 4 7 7 1 2 3 4 5 6 7 8 9 10]
Testing short int vector initialisation with: "3 0xF -10, 0133 0177, 0x0 ":
sv = [3 15 -10 91 127 0]
Testing complex vector initialisation with: " (0.3, 0.4)  .2-.01i, 1e-3+0.25i":
cv = [0.3000+0.4000i 0.2000-0.0100i 0.0010+0.2500i]
Testing bit vector initialisation with: "1 1 0,1  1  ,  0 ,1  ":
bv = [1 1 0 1 1 0 1]

v = [1.0000 2.0000 3.4000 -4.5000 6.7000]
y = 0.7600
rem(v, y) = [0.2400 0.4800 0.3600 -0.7000 0.6200]
rem(10, v) = [0.0000 0.0000 3.2000 1.0000 3.3000]
M = [[1.0000 2.3000]
 [4.5000 -6.7000]]
rem(M, y) = [[0.2400 0.0200]
 [0.7000 -0.6200]]
rem(10, M) = [[0.0000 0.8000]
 [1.0000 3.3000]]

any(b1) = 1
any(b2) = 0
all(b3) = 1
all(b4) = 0
