=============================
   Testing Mat<bin> (bmat)
=============================
A =
[[0 0 0 0]
 [1 1 0 0]
 [1 1 0 0]]
B =
[[1 1 1 1]
 [0 1 1 1]
 [0 1 1 0]]
C =
[[0 0 1]
 [0 1 0]
 [0 1 0]
 [1 1 0]]
v = [1 1 0 1]
u = [0 1 0]
c = 1

A(1,2) = 0
A(2,3) = 0
A(6) = 0
A(0,2,1,3) =
[[0 0 0]
 [1 0 0]
 [1 0 0]]
A.get_row(1) = [1 1 0 0]
A.get_rows(1,2) =
[[1 1 0 0]
 [1 1 0 0]]
A.get_col(2) = [0 0 0]
A.get_cols(2,3) =
[[0 0]
 [0 0]
 [0 0]]

Mv(A) =
[[1]
 [1]
 [0]
 [1]]
D(A) =
[[0 0 0 0]
 [1 1 0 0]
 [1 1 0 0]]
D.set_size(6,5, true); D =
[[0 0 0 0 0]
 [1 1 0 0 0]
 [1 1 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]]
D.set_size(3,2, true); D =
[[0 0]
 [1 1]
 [1 1]]
D.zeros(); D =
[[0 0]
 [0 0]
 [0 0]]
D.ones(); D =
[[1 1]
 [1 1]
 [1 1]]
D = A; D =
[[0 0 0 0]
 [1 1 0 0]
 [1 1 0 0]]
D(2,2) = c; D =
[[0 0 0 0]
 [1 1 0 0]
 [1 1 1 0]]
D(7) = c; D =
[[0 0 0 1]
 [1 1 0 0]
 [1 1 1 0]]
D.set(0,1, c); D =
[[0 1 0 1]
 [1 1 0 0]
 [1 1 1 0]]
D.set_row(1, v); D =
[[0 1 0 1]
 [1 1 0 1]
 [1 1 1 0]]
D.set_col(2, u): D=
[[0 1 0 1]
 [1 1 1 1]
 [1 1 0 0]]
D.copy_row(1, 2); D =
[[0 1 0 1]
 [1 1 0 0]
 [1 1 0 0]]
D.copy_col(2, 3); D =
[[0 1 1 1]
 [1 1 0 0]
 [1 1 0 0]]
D.swap_rows(0, 2); D =
[[1 1 0 0]
 [1 1 0 0]
 [0 1 1 1]]
D.swap_cols(0, 3); D =
[[0 1 0 1]
 [0 1 0 1]
 [1 1 1 0]]
D.set_submatrix(1,2,2,3, A(0,1,0,1); D =
[[0 1 0 1]
 [0 1 0 0]
 [1 1 1 1]]
D.set_submatrix(0,0, A(0,1,0,1); D =
[[0 0 0 1]
 [1 1 0 0]
 [1 1 1 1]]
D.set_submatrix(1,2,2,3, c); D =
[[0 0 0 1]
 [1 1 1 1]
 [1 1 1 1]]

A.T() =
[[0 1 1]
 [0 1 1]
 [0 0 0]
 [0 0 0]]
A.T().T() =
[[0 0 0 0]
 [1 1 0 0]
 [1 1 0 0]]
A.H() =
[[0 1 1]
 [0 1 1]
 [0 0 0]
 [0 0 0]]

D = concat_horizontal(A,B); D =
[[0 0 0 0 1 1 1 1]
 [1 1 0 0 0 1 1 1]
 [1 1 0 0 0 1 1 0]]
D = concat_vertical(A,B); D =
[[0 0 0 0]
 [1 1 0 0]
 [1 1 0 0]
 [1 1 1 1]
 [0 1 1 1]
 [0 1 1 0]]

D.del_row(2); D =
[[0 0 0 0]
 [1 1 0 0]
 [1 1 1 1]
 [0 1 1 1]
 [0 1 1 0]]
D.del_rows(0,2); D =
[[0 1 1 1]
 [0 1 1 0]]
D.del_col(3); D =
[[0 1 1]
 [0 1 1]]
D.del_cols(0,1); D =
[[1]
 [1]]

A.ins_row(1, v); A =
[[0 0 0 0]
 [1 1 0 1]
 [1 1 0 0]
 [1 1 0 0]]
A.ins_col(0, v); A =
[[1 0 0 0 0]
 [1 1 1 0 1]
 [0 1 1 0 0]
 [1 1 1 0 0]]
A.append_col(A2.get_col(3)); A =
[[1 0 0 0 0 0]
 [1 1 1 0 1 0]
 [0 1 1 0 0 0]
 [1 1 1 0 0 0]]
A.append_row(A2.get_row(0)); A =
[[1 0 0 0 0 0]
 [1 1 1 0 1 0]
 [0 1 1 0 0 0]
 [1 1 1 0 0 0]
 [1 0 0 0 0 0]]

A+B =
[[1 1 1 1]
 [1 0 1 1]
 [1 0 1 0]]
A+c =
[[1 1 1 1]
 [0 0 1 1]
 [0 0 1 1]]
c+A =
[[1 1 1 1]
 [0 0 1 1]
 [0 0 1 1]]
A+=B; A =
[[1 1 1 1]
 [1 0 1 1]
 [1 0 1 0]]
A+=c; A =
[[1 1 1 1]
 [0 0 1 1]
 [0 0 1 1]]

A-B =
[[1 1 1 1]
 [1 0 1 1]
 [1 0 1 0]]
A-c =
[[1 1 1 1]
 [0 0 1 1]
 [0 0 1 1]]
c-A =
[[1 1 1 1]
 [0 0 1 1]
 [0 0 1 1]]
A-=B; A =
[[1 1 1 1]
 [1 0 1 1]
 [1 0 1 0]]
A-=c; A =
[[1 1 1 1]
 [0 0 1 1]
 [0 0 1 1]]
-A =
[[0 0 0 0]
 [1 1 0 0]
 [1 1 0 0]]

A*C =
[[0 0 0]
 [0 1 1]
 [0 1 1]]
A*=C; A =
[[0 0 0]
 [0 1 1]
 [0 1 1]]
A*c =
[[0 0 0 0]
 [1 1 0 0]
 [1 1 0 0]]
c*A =
[[0 0 0 0]
 [1 1 0 0]
 [1 1 0 0]]
A*=c; A =
[[0 0 0 0]
 [1 1 0 0]
 [1 1 0 0]]
A*v = [0 0 0]
A2 = [[0 0 0 0]]; u*A2 =
[[0 0 0 0]
 [0 0 0 0]
 [0 0 0 0]]
elem_mult(A,B) =
[[0 0 0 0]
 [0 1 0 0]
 [0 1 0 0]]
elem_mult_out(A,B,out); out =
[[0 0 0 0]
 [0 1 0 0]
 [0 1 0 0]]
elem_mult_inplace(A,B); B =
[[0 0 0 0]
 [0 1 0 0]
 [0 1 0 0]]
elem_mult_sum(A,B) = 0

A/c =
[[1 1 1 1]
 [1 1 1 1]
 [1 1 1 1]]
A/=c; A =
[[1 1 1 1]
 [1 1 1 1]
 [1 1 1 1]]
A/=B; A =
[[1 1 1 1]
 [1 1 1 1]
 [1 1 1 0]]
elem_div(A,B) =
[[1 1 1 1]
 [1 1 1 1]
 [1 1 1 0]]
elem_div_out(A,B,out); out =
[[1 1 1 1]
 [1 1 1 1]
 [1 1 1 0]]
elem_div_sum(A,B) = 1

=============================
   Testing Mat<int> (imat)
=============================
A =
[[1 2 5 1]
 [3 9 3 4]
 [2 4 7 2]]
B =
[[4 1 3 5]
 [2 5 7 4]
 [2 5 6 7]]
C =
[[7 5 1]
 [4 1 4]
 [5 4 7]
 [6 9 4]]
v = [8 4 6 4]
u = [8 2 7]
c = 1

A(1,2) = 3
A(2,3) = 2
A(6) = 5
A(0,2,1,3) =
[[2 5 1]
 [9 3 4]
 [4 7 2]]
A.get_row(1) = [3 9 3 4]
A.get_rows(1,2) =
[[3 9 3 4]
 [2 4 7 2]]
A.get_col(2) = [5 3 7]
A.get_cols(2,3) =
[[5 1]
 [3 4]
 [7 2]]

Mv(A) =
[[8]
 [4]
 [6]
 [4]]
D(A) =
[[1 2 5 1]
 [3 9 3 4]
 [2 4 7 2]]
D.set_size(6,5, true); D =
[[1 2 5 1 0]
 [3 9 3 4 0]
 [2 4 7 2 0]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]]
D.set_size(3,2, true); D =
[[1 2]
 [3 9]
 [2 4]]
D.zeros(); D =
[[0 0]
 [0 0]
 [0 0]]
D.ones(); D =
[[1 1]
 [1 1]
 [1 1]]
D = A; D =
[[1 2 5 1]
 [3 9 3 4]
 [2 4 7 2]]
D(2,2) = c; D =
[[1 2 5 1]
 [3 9 3 4]
 [2 4 1 2]]
D(7) = c; D =
[[1 2 5 1]
 [3 9 3 4]
 [2 4 1 2]]
D.set(0,1, c); D =
[[1 1 5 1]
 [3 9 3 4]
 [2 4 1 2]]
D.set_row(1, v); D =
[[1 1 5 1]
 [8 4 6 4]
 [2 4 1 2]]
D.set_col(2, u): D=
[[1 1 8 1]
 [8 4 2 4]
 [2 4 7 2]]
D.copy_row(1, 2); D =
[[1 1 8 1]
 [2 4 7 2]
 [2 4 7 2]]
D.copy_col(2, 3); D =
[[1 1 1 1]
 [2 4 2 2]
 [2 4 2 2]]
D.swap_rows(0, 2); D =
[[2 4 2 2]
 [2 4 2 2]
 [1 1 1 1]]
D.swap_cols(0, 3); D =
[[2 4 2 2]
 [2 4 2 2]
 [1 1 1 1]]
D.set_submatrix(1,2,2,3, A(0,1,0,1); D =
[[2 4 2 2]
 [2 4 1 2]
 [1 1 3 9]]
D.set_submatrix(0,0, A(0,1,0,1); D =
[[1 2 2 2]
 [3 9 1 2]
 [1 1 3 9]]
D.set_submatrix(1,2,2,3, c); D =
[[1 2 2 2]
 [3 9 1 1]
 [1 1 1 1]]

A.T() =
[[1 3 2]
 [2 9 4]
 [5 3 7]
 [1 4 2]]
A.T().T() =
[[1 2 5 1]
 [3 9 3 4]
 [2 4 7 2]]
A.H() =
[[1 3 2]
 [2 9 4]
 [5 3 7]
 [1 4 2]]

D = concat_horizontal(A,B); D =
[[1 2 5 1 4 1 3 5]
 [3 9 3 4 2 5 7 4]
 [2 4 7 2 2 5 6 7]]
D = concat_vertical(A,B); D =
[[1 2 5 1]
 [3 9 3 4]
 [2 4 7 2]
 [4 1 3 5]
 [2 5 7 4]
 [2 5 6 7]]

D.del_row(2); D =
[[1 2 5 1]
 [3 9 3 4]
 [4 1 3 5]
 [2 5 7 4]
 [2 5 6 7]]
D.del_rows(0,2); D =
[[2 5 7 4]
 [2 5 6 7]]
D.del_col(3); D =
[[2 5 7]
 [2 5 6]]
D.del_cols(0,1); D =
[[7]
 [6]]

A.ins_row(1, v); A =
[[1 2 5 1]
 [8 4 6 4]
 [3 9 3 4]
 [2 4 7 2]]
A.ins_col(0, v); A =
[[8 1 2 5 1]
 [4 8 4 6 4]
 [6 3 9 3 4]
 [4 2 4 7 2]]
A.append_col(A2.get_col(3)); A =
[[8 1 2 5 1 5]
 [4 8 4 6 4 6]
 [6 3 9 3 4 3]
 [4 2 4 7 2 7]]
A.append_row(A2.get_row(0)); A =
[[8 1 2 5 1 5]
 [4 8 4 6 4 6]
 [6 3 9 3 4 3]
 [4 2 4 7 2 7]
 [8 1 2 5 1 5]]

A+B =
[[5 3 8 6]
 [5 14 10 8]
 [4 9 13 9]]
A+c =
[[2 3 6 2]
 [4 10 4 5]
 [3 5 8 3]]
c+A =
[[2 3 6 2]
 [4 10 4 5]
 [3 5 8 3]]
A+=B; A =
[[5 3 8 6]
 [5 14 10 8]
 [4 9 13 9]]
A+=c; A =
[[2 3 6 2]
 [4 10 4 5]
 [3 5 8 3]]

A-B =
[[-3 1 2 -4]
 [1 4 -4 0]
 [0 -1 1 -5]]
A-c =
[[0 1 4 0]
 [2 8 2 3]
 [1 3 6 1]]
c-A =
[[0 -1 -4 0]
 [-2 -8 -2 -3]
 [-1 -3 -6 -1]]
A-=B; A =
[[-3 1 2 -4]
 [1 4 -4 0]
 [0 -1 1 -5]]
A-=c; A =
[[0 1 4 0]
 [2 8 2 3]
 [1 3 6 1]]
-A =
[[-1 -2 -5 -1]
 [-3 -9 -3 -4]
 [-2 -4 -7 -2]]

A*C =
[[46 36 48]
 [96 72 76]
 [77 60 75]]
A*=C; A =
[[46 36 48]
 [96 72 76]
 [77 60 75]]
A*c =
[[1 2 5 1]
 [3 9 3 4]
 [2 4 7 2]]
c*A =
[[1 2 5 1]
 [3 9 3 4]
 [2 4 7 2]]
A*=c; A =
[[1 2 5 1]
 [3 9 3 4]
 [2 4 7 2]]
A*v = [50 94 82]
A2 = [[1 2 5 1]]; u*A2 =
[[8 16 40 8]
 [2 4 10 2]
 [7 14 35 7]]
elem_mult(A,B) =
[[4 2 15 5]
 [6 45 21 16]
 [4 20 42 14]]
elem_mult_out(A,B,out); out =
[[4 2 15 5]
 [6 45 21 16]
 [4 20 42 14]]
elem_mult_inplace(A,B); B =
[[4 2 15 5]
 [6 45 21 16]
 [4 20 42 14]]
elem_mult_sum(A,B) = 194

A/c =
[[1 2 5 1]
 [3 9 3 4]
 [2 4 7 2]]
A/=c; A =
[[1 2 5 1]
 [3 9 3 4]
 [2 4 7 2]]
A/=B; A =
[[0 2 1 0]
 [1 1 0 1]
 [1 0 1 0]]
elem_div(A,B) =
[[0 2 1 0]
 [1 1 0 1]
 [1 0 1 0]]
elem_div_out(A,B,out); out =
[[0 2 1 0]
 [1 1 0 1]
 [1 0 1 0]]
elem_div_sum(A,B) = 8

===============================
   Testing Mat<double> (mat)
===============================
A =
[[-0.6124 1.2957 -0.1326 0.5585]
 [1.4815 -0.2982 0.2718 0.2996]
 [0.9243 -0.0744 -0.2958 -1.2992]]
B =
[[-0.8841 -0.7612 0.3100 1.4934]
 [-1.3342 0.7938 -0.2003 0.1789]
 [0.6073 -1.0607 0.1421 -0.4927]]
C =
[[-0.3124 0.2491 -0.3312]
 [0.2358 -0.3909 0.7760]
 [-0.7648 1.4395 0.4525]
 [0.6732 -0.7935 1.0102]]
v = [-1.8382 -0.3517 -0.8910 -0.2597]
u = [0.0648 -1.4290 1.1741]
c = 1.5505

A(1,2) = 0.2718
A(2,3) = -1.2992
A(6) = -0.1326
A(0,2,1,3) =
[[1.2957 -0.1326 0.5585]
 [-0.2982 0.2718 0.2996]
 [-0.0744 -0.2958 -1.2992]]
A.get_row(1) = [1.4815 -0.2982 0.2718 0.2996]
A.get_rows(1,2) =
[[1.4815 -0.2982 0.2718 0.2996]
 [0.9243 -0.0744 -0.2958 -1.2992]]
A.get_col(2) = [-0.1326 0.2718 -0.2958]
A.get_cols(2,3) =
[[-0.1326 0.5585]
 [0.2718 0.2996]
 [-0.2958 -1.2992]]

Mv(A) =
[[-1.8382]
 [-0.3517]
 [-0.8910]
 [-0.2597]]
D(A) =
[[-0.6124 1.2957 -0.1326 0.5585]
 [1.4815 -0.2982 0.2718 0.2996]
 [0.9243 -0.0744 -0.2958 -1.2992]]
D.set_size(6,5, true); D =
[[-0.6124 1.2957 -0.1326 0.5585 0.0000]
 [1.4815 -0.2982 0.2718 0.2996 0.0000]
 [0.9243 -0.0744 -0.2958 -1.2992 0.0000]
 [0.0000 0.0000 0.0000 0.0000 0.0000]
 [0.0000 0.0000 0.0000 0.0000 0.0000]
 [0.0000 0.0000 0.0000 0.0000 0.0000]]
D.set_size(3,2, true); D =
[[-0.6124 1.2957]
 [1.4815 -0.2982]
 [0.9243 -0.0744]]
D.zeros(); D =
[[0.0000 0.0000]
 [0.0000 0.0000]
 [0.0000 0.0000]]
D.ones(); D =
[[1.0000 1.0000]
 [1.0000 1.0000]
 [1.0000 1.0000]]
D = A; D =
[[-0.6124 1.2957 -0.1326 0.5585]
 [1.4815 -0.2982 0.2718 0.2996]
 [0.9243 -0.0744 -0.2958 -1.2992]]
D(2,2) = c; D =
[[-0.6124 1.2957 -0.1326 0.5585]
 [1.4815 -0.2982 0.2718 0.2996]
 [0.9243 -0.0744 1.5505 -1.2992]]
D(7) = c; D =
[[-0.6124 1.2957 -0.1326 1.5505]
 [1.4815 -0.2982 0.2718 0.2996]
 [0.9243 -0.0744 1.5505 -1.2992]]
D.set(0,1, c); D =
[[-0.6124 1.5505 -0.1326 1.5505]
 [1.4815 -0.2982 0.2718 0.2996]
 [0.9243 -0.0744 1.5505 -1.2992]]
D.set_row(1, v); D =
[[-0.6124 1.5505 -0.1326 1.5505]
 [-1.8382 -0.3517 -0.8910 -0.2597]
 [0.9243 -0.0744 1.5505 -1.2992]]
D.set_col(2, u): D=
[[-0.6124 1.5505 0.0648 1.5505]
 [-1.8382 -0.3517 -1.4290 -0.2597]
 [0.9243 -0.0744 1.1741 -1.2992]]
D.copy_row(1, 2); D =
[[-0.6124 1.5505 0.0648 1.5505]
 [0.9243 -0.0744 1.1741 -1.2992]
 [0.9243 -0.0744 1.1741 -1.2992]]
D.copy_col(2, 3); D =
[[-0.6124 1.5505 1.5505 1.5505]
 [0.9243 -0.0744 -1.2992 -1.2992]
 [0.9243 -0.0744 -1.2992 -1.2992]]
D.swap_rows(0, 2); D =
[[0.9243 -0.0744 -1.2992 -1.2992]
 [0.9243 -0.0744 -1.2992 -1.2992]
 [-0.6124 1.5505 1.5505 1.5505]]
D.swap_cols(0, 3); D =
[[-1.2992 -0.0744 -1.2992 0.9243]
 [-1.2992 -0.0744 -1.2992 0.9243]
 [1.5505 1.5505 1.5505 -0.6124]]
D.set_submatrix(1,2,2,3, A(0,1,0,1); D =
[[-1.2992 -0.0744 -1.2992 0.9243]
 [-1.2992 -0.0744 -0.6124 1.2957]
 [1.5505 1.5505 1.4815 -0.2982]]
D.set_submatrix(0,0, A(0,1,0,1); D =
[[-0.6124 1.2957 -1.2992 0.9243]
 [1.4815 -0.2982 -0.6124 1.2957]
 [1.5505 1.5505 1.4815 -0.2982]]
D.set_submatrix(1,2,2,3, c); D =
[[-0.6124 1.2957 -1.2992 0.9243]
 [1.4815 -0.2982 1.5505 1.5505]
 [1.5505 1.5505 1.5505 1.5505]]

A.T() =
[[-0.6124 1.4815 0.9243]
 [1.2957 -0.2982 -0.0744]
 [-0.1326 0.2718 -0.2958]
 [0.5585 0.2996 -1.2992]]
A.T().T() =
[[-0.6124 1.2957 -0.1326 0.5585]
 [1.4815 -0.2982 0.2718 0.2996]
 [0.9243 -0.0744 -0.2958 -1.2992]]
A.H() =
[[-0.6124 1.4815 0.9243]
 [1.2957 -0.2982 -0.0744]
 [-0.1326 0.2718 -0.2958]
 [0.5585 0.2996 -1.2992]]

D = concat_horizontal(A,B); D =
[[-0.6124 1.2957 -0.1326 0.5585 -0.8841 -0.7612 0.3100 1.4934]
 [1.4815 -0.2982 0.2718 0.2996 -1.3342 0.7938 -0.2003 0.1789]
 [0.9243 -0.0744 -0.2958 -1.2992 0.6073 -1.0607 0.1421 -0.4927]]
D = concat_vertical(A,B); D =
[[-0.6124 1.2957 -0.1326 0.5585]
 [1.4815 -0.2982 0.2718 0.2996]
 [0.9243 -0.0744 -0.2958 -1.2992]
 [-0.8841 -0.7612 0.3100 1.4934]
 [-1.3342 0.7938 -0.2003 0.1789]
 [0.6073 -1.0607 0.1421 -0.4927]]

D.del_row(2); D =
[[-0.6124 1.2957 -0.1326 0.5585]
 [1.4815 -0.2982 0.2718 0.2996]
 [-0.8841 -0.7612 0.3100 1.4934]
 [-1.3342 0.7938 -0.2003 0.1789]
 [0.6073 -1.0607 0.1421 -0.4927]]
D.del_rows(0,2); D =
[[-1.3342 0.7938 -0.2003 0.1789]
 [0.6073 -1.0607 0.1421 -0.4927]]
D.del_col(3); D =
[[-1.3342 0.7938 -0.2003]
 [0.6073 -1.0607 0.1421]]
D.del_cols(0,1); D =
[[-0.2003]
 [0.1421]]

A.ins_row(1, v); A =
[[-0.6124 1.2957 -0.1326 0.5585]
 [-1.8382 -0.3517 -0.8910 -0.2597]
 [1.4815 -0.2982 0.2718 0.2996]
 [0.9243 -0.0744 -0.2958 -1.2992]]
A.ins_col(0, v); A =
[[-1.8382 -0.6124 1.2957 -0.1326 0.5585]
 [-0.3517 -1.8382 -0.3517 -0.8910 -0.2597]
 [-0.8910 1.4815 -0.2982 0.2718 0.2996]
 [-0.2597 0.9243 -0.0744 -0.2958 -1.2992]]
A.append_col(A2.get_col(3)); A =
[[-1.8382 -0.6124 1.2957 -0.1326 0.5585 -0.1326]
 [-0.3517 -1.8382 -0.3517 -0.8910 -0.2597 -0.8910]
 [-0.8910 1.4815 -0.2982 0.2718 0.2996 0.2718]
 [-0.2597 0.9243 -0.0744 -0.2958 -1.2992 -0.2958]]
A.append_row(A2.get_row(0)); A =
[[-1.8382 -0.6124 1.2957 -0.1326 0.5585 -0.1326]
 [-0.3517 -1.8382 -0.3517 -0.8910 -0.2597 -0.8910]
 [-0.8910 1.4815 -0.2982 0.2718 0.2996 0.2718]
 [-0.2597 0.9243 -0.0744 -0.2958 -1.2992 -0.2958]
 [-1.8382 -0.6124 1.2957 -0.1326 0.5585 -0.1326]]

A+B =
[[-1.4965 0.5344 0.1774 2.0518]
 [0.1474 0.4956 0.0715 0.4786]
 [1.5315 -1.1352 -0.1536 -1.7919]]
A+c =
[[0.9381 2.8461 1.4179 2.1089]
 [3.0320 1.2523 1.8223 1.8501]
 [2.4747 1.4760 1.2547 0.2513]]
c+A =
[[0.9381 2.8461 1.4179 2.1089]
 [3.0320 1.2523 1.8223 1.8501]
 [2.4747 1.4760 1.2547 0.2513]]
A+=B; A =
[[-1.4965 0.5344 0.1774 2.0518]
 [0.1474 0.4956 0.0715 0.4786]
 [1.5315 -1.1352 -0.1536 -1.7919]]
A+=c; A =
[[0.9381 2.8461 1.4179 2.1089]
 [3.0320 1.2523 1.8223 1.8501]
 [2.4747 1.4760 1.2547 0.2513]]

A-B =
[[0.2717 2.0569 -0.4426 -0.9349]
 [2.8157 -1.0919 0.4722 0.1207]
 [0.3170 0.9863 -0.4379 -0.8065]]
A-c =
[[-2.1628 -0.2548 -1.6830 -0.9920]
 [-0.0689 -1.8486 -1.2786 -1.2508]
 [-0.6262 -1.6249 -1.8462 -2.8496]]
c-A =
[[2.1628 0.2548 1.6830 0.9920]
 [0.0689 1.8486 1.2786 1.2508]
 [0.6262 1.6249 1.8462 2.8496]]
A-=B; A =
[[0.2717 2.0569 -0.4426 -0.9349]
 [2.8157 -1.0919 0.4722 0.1207]
 [0.3170 0.9863 -0.4379 -0.8065]]
A-=c; A =
[[-2.1628 -0.2548 -1.6830 -0.9920]
 [-0.0689 -1.8486 -1.2786 -1.2508]
 [-0.6262 -1.6249 -1.8462 -2.8496]]
-A =
[[0.6124 -1.2957 0.1326 -0.5585]
 [-1.4815 0.2982 -0.2718 -0.2996]
 [-0.9243 0.0744 0.2958 1.2992]]

A*C =
[[0.9742 -1.2930 1.7124]
 [-0.5393 0.6392 -0.2963]
 [-0.9547 0.8645 -1.8102]]
A*=C; A =
[[0.9742 -1.2930 1.7124]
 [-0.5393 0.6392 -0.2963]
 [-0.9547 0.8645 -1.8102]]
A*c =
[[-0.9495 2.0089 -0.2055 0.8659]
 [2.2970 -0.4623 0.4215 0.4645]
 [1.4330 -0.1154 -0.4586 -2.0143]]
c*A =
[[-0.9495 2.0089 -0.2055 0.8659]
 [2.2970 -0.4623 0.4215 0.4645]
 [1.4330 -0.1154 -0.4586 -2.0143]]
A*=c; A =
[[-0.9495 2.0089 -0.2055 0.8659]
 [2.2970 -0.4623 0.4215 0.4645]
 [1.4330 -0.1154 -0.4586 -2.0143]]
A*v = [0.6430 -2.9385 -1.0718]
A2 = [[-0.6124 1.2957 -0.1326 0.5585]]; u*A2 =
[[-0.0397 0.0840 -0.0086 0.0362]
 [0.8751 -1.8516 0.1894 -0.7981]
 [-0.7190 1.5213 -0.1557 0.6557]]
elem_mult(A,B) =
[[0.5414 -0.9863 -0.0411 0.8340]
 [-1.9766 -0.2367 -0.0545 0.0536]
 [0.5613 0.0790 -0.0420 0.6401]]
elem_mult_out(A,B,out); out =
[[0.5414 -0.9863 -0.0411 0.8340]
 [-1.9766 -0.2367 -0.0545 0.0536]
 [0.5613 0.0790 -0.0420 0.6401]]
elem_mult_inplace(A,B); B =
[[0.5414 -0.9863 -0.0411 0.8340]
 [-1.9766 -0.2367 -0.0545 0.0536]
 [0.5613 0.0790 -0.0420 0.6401]]
elem_mult_sum(A,B) = -0.6279

A/c =
[[-0.3950 0.8357 -0.0855 0.3602]
 [0.9555 -0.1923 0.1753 0.1932]
 [0.5961 -0.0480 -0.1908 -0.8379]]
A/=c; A =
[[-0.3950 0.8357 -0.0855 0.3602]
 [0.9555 -0.1923 0.1753 0.1932]
 [0.5961 -0.0480 -0.1908 -0.8379]]
A/=B; A =
[[0.6927 -1.7021 -0.4276 0.3740]
 [-1.1105 -0.3757 -1.3569 1.6745]
 [1.5220 0.0702 -2.0809 2.6369]]
elem_div(A,B) =
[[0.6927 -1.7021 -0.4276 0.3740]
 [-1.1105 -0.3757 -1.3569 1.6745]
 [1.5220 0.0702 -2.0809 2.6369]]
elem_div_out(A,B,out); out =
[[0.6927 -1.7021 -0.4276 0.3740]
 [-1.1105 -0.3757 -1.3569 1.6745]
 [1.5220 0.0702 -2.0809 2.6369]]
elem_div_sum(A,B) = -0.0834

==========================================
   Testing Mat<complex<double> > (cmat)
==========================================
A =
[[-0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i]
 [-0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i]
 [-0.2915+0.7803i -0.2941-0.7994i 1.2962-0.1030i -0.8699-0.7039i]]
B =
[[0.7048+0.0976i 0.0682-0.9952i 0.4388-0.2412i 0.0146+0.6869i]
 [-0.5883+1.1873i -0.6854-0.4138i 0.0004-1.3585i -0.7774-0.5661i]
 [0.8496-0.8574i -0.1766+1.2697i -0.0060-0.2397i -1.6359+0.7692i]]
C =
[[0.7382-0.5274i -1.5557+0.7290i -0.5795-0.3693i]
 [-1.1268-0.6975i 0.4150+0.3875i 0.1520+0.1910i]
 [1.2607-1.1375i 0.8859+1.4955i -0.0140-0.1838i]
 [-0.0444-0.4806i 0.7950-0.6755i 0.4746-0.3160i]]
v = [-0.1872+1.4632i 0.4134-0.0812i -0.1511+0.7644i -0.7372-0.9940i]
u = [0.1800+0.1486i -0.1177-1.6486i -0.3098+0.3228i]
c = -0.1724+0.6195i

A(1,2) = 0.2044+0.9265i
A(2,3) = -0.8699-0.7039i
A(6) = 0.2678-1.0849i
A(0,2,1,3) =
[[-0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i]
 [-0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i]
 [-0.2941-0.7994i 1.2962-0.1030i -0.8699-0.7039i]]
A.get_row(1) = [-0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i]
A.get_rows(1,2) =
[[-0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i]
 [-0.2915+0.7803i -0.2941-0.7994i 1.2962-0.1030i -0.8699-0.7039i]]
A.get_col(2) = [0.2678-1.0849i 0.2044+0.9265i 1.2962-0.1030i]
A.get_cols(2,3) =
[[0.2678-1.0849i -0.0933+0.2843i]
 [0.2044+0.9265i -0.8061+0.6237i]
 [1.2962-0.1030i -0.8699-0.7039i]]

Mv(A) =
[[-0.1872+1.4632i]
 [0.4134-0.0812i]
 [-0.1511+0.7644i]
 [-0.7372-0.9940i]]
D(A) =
[[-0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i]
 [-0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i]
 [-0.2915+0.7803i -0.2941-0.7994i 1.2962-0.1030i -0.8699-0.7039i]]
D.set_size(6,5, true); D =
[[-0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i 0.0000+0.0000i]
 [-0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i 0.0000+0.0000i]
 [-0.2915+0.7803i -0.2941-0.7994i 1.2962-0.1030i -0.8699-0.7039i 0.0000+0.0000i]
 [0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i]
 [0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i]
 [0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i]]
D.set_size(3,2, true); D =
[[-0.1478-0.2132i -0.6752-0.0387i]
 [-0.1693-0.4322i -0.7615+1.6166i]
 [-0.2915+0.7803i -0.2941-0.7994i]]
D.zeros(); D =
[[0.0000+0.0000i 0.0000+0.0000i]
 [0.0000+0.0000i 0.0000+0.0000i]
 [0.0000+0.0000i 0.0000+0.0000i]]
D.ones(); D =
[[1.0000+0.0000i 1.0000+0.0000i]
 [1.0000+0.0000i 1.0000+0.0000i]
 [1.0000+0.0000i 1.0000+0.0000i]]
D = A; D =
[[-0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i]
 [-0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i]
 [-0.2915+0.7803i -0.2941-0.7994i 1.2962-0.1030i -0.8699-0.7039i]]
D(2,2) = c; D =
[[-0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i]
 [-0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i]
 [-0.2915+0.7803i -0.2941-0.7994i -0.1724+0.6195i -0.8699-0.7039i]]
D(7) = c; D =
[[-0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.1724+0.6195i]
 [-0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i]
 [-0.2915+0.7803i -0.2941-0.7994i -0.1724+0.6195i -0.8699-0.7039i]]
D.set(0,1, c); D =
[[-0.1478-0.2132i -0.1724+0.6195i 0.2678-1.0849i -0.1724+0.6195i]
 [-0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i]
 [-0.2915+0.7803i -0.2941-0.7994i -0.1724+0.6195i -0.8699-0.7039i]]
D.set_row(1, v); D =
[[-0.1478-0.2132i -0.1724+0.6195i 0.2678-1.0849i -0.1724+0.6195i]
 [-0.1872+1.4632i 0.4134-0.0812i -0.1511+0.7644i -0.7372-0.9940i]
 [-0.2915+0.7803i -0.2941-0.7994i -0.1724+0.6195i -0.8699-0.7039i]]
D.set_col(2, u): D=
[[-0.1478-0.2132i -0.1724+0.6195i 0.1800+0.1486i -0.1724+0.6195i]
 [-0.1872+1.4632i 0.4134-0.0812i -0.1177-1.6486i -0.7372-0.9940i]
 [-0.2915+0.7803i -0.2941-0.7994i -0.3098+0.3228i -0.8699-0.7039i]]
D.copy_row(1, 2); D =
[[-0.1478-0.2132i -0.1724+0.6195i 0.1800+0.1486i -0.1724+0.6195i]
 [-0.2915+0.7803i -0.2941-0.7994i -0.3098+0.3228i -0.8699-0.7039i]
 [-0.2915+0.7803i -0.2941-0.7994i -0.3098+0.3228i -0.8699-0.7039i]]
D.copy_col(2, 3); D =
[[-0.1478-0.2132i -0.1724+0.6195i -0.1724+0.6195i -0.1724+0.6195i]
 [-0.2915+0.7803i -0.2941-0.7994i -0.8699-0.7039i -0.8699-0.7039i]
 [-0.2915+0.7803i -0.2941-0.7994i -0.8699-0.7039i -0.8699-0.7039i]]
D.swap_rows(0, 2); D =
[[-0.2915+0.7803i -0.2941-0.7994i -0.8699-0.7039i -0.8699-0.7039i]
 [-0.2915+0.7803i -0.2941-0.7994i -0.8699-0.7039i -0.8699-0.7039i]
 [-0.1478-0.2132i -0.1724+0.6195i -0.1724+0.6195i -0.1724+0.6195i]]
D.swap_cols(0, 3); D =
[[-0.8699-0.7039i -0.2941-0.7994i -0.8699-0.7039i -0.2915+0.7803i]
 [-0.8699-0.7039i -0.2941-0.7994i -0.8699-0.7039i -0.2915+0.7803i]
 [-0.1724+0.6195i -0.1724+0.6195i -0.1724+0.6195i -0.1478-0.2132i]]
D.set_submatrix(1,2,2,3, A(0,1,0,1); D =
[[-0.8699-0.7039i -0.2941-0.7994i -0.8699-0.7039i -0.2915+0.7803i]
 [-0.8699-0.7039i -0.2941-0.7994i -0.1478-0.2132i -0.6752-0.0387i]
 [-0.1724+0.6195i -0.1724+0.6195i -0.1693-0.4322i -0.7615+1.6166i]]
D.set_submatrix(0,0, A(0,1,0,1); D =
[[-0.1478-0.2132i -0.6752-0.0387i -0.8699-0.7039i -0.2915+0.7803i]
 [-0.1693-0.4322i -0.7615+1.6166i -0.1478-0.2132i -0.6752-0.0387i]
 [-0.1724+0.6195i -0.1724+0.6195i -0.1693-0.4322i -0.7615+1.6166i]]
D.set_submatrix(1,2,2,3, c); D =
[[-0.1478-0.2132i -0.6752-0.0387i -0.8699-0.7039i -0.2915+0.7803i]
 [-0.1693-0.4322i -0.7615+1.6166i -0.1724+0.6195i -0.1724+0.6195i]
 [-0.1724+0.6195i -0.1724+0.6195i -0.1724+0.6195i -0.1724+0.6195i]]

A.T() =
[[-0.1478-0.2132i -0.1693-0.4322i -0.2915+0.7803i]
 [-0.6752-0.0387i -0.7615+1.6166i -0.2941-0.7994i]
 [0.2678-1.0849i 0.2044+0.9265i 1.2962-0.1030i]
 [-0.0933+0.2843i -0.8061+0.6237i -0.8699-0.7039i]]
A.T().T() =
[[-0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i]
 [-0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i]
 [-0.2915+0.7803i -0.2941-0.7994i 1.2962-0.1030i -0.8699-0.7039i]]
A.H() =
[[-0.1478+0.2132i -0.1693+0.4322i -0.2915-0.7803i]
 [-0.6752+0.0387i -0.7615-1.6166i -0.2941+0.7994i]
 [0.2678+1.0849i 0.2044-0.9265i 1.2962+0.1030i]
 [-0.0933-0.2843i -0.8061-0.6237i -0.8699+0.7039i]]

D = concat_horizontal(A,B); D =
[[-0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i 0.7048+0.0976i 0.0682-0.9952i 0.4388-0.2412i 0.0146+0.6869i]
 [-0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i -0.5883+1.1873i -0.6854-0.4138i 0.0004-1.3585i -0.7774-0.5661i]
 [-0.2915+0.7803i -0.2941-0.7994i 1.2962-0.1030i -0.8699-0.7039i 0.8496-0.8574i -0.1766+1.2697i -0.0060-0.2397i -1.6359+0.7692i]]
D = concat_vertical(A,B); D =
[[-0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i]
 [-0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i]
 [-0.2915+0.7803i -0.2941-0.7994i 1.2962-0.1030i -0.8699-0.7039i]
 [0.7048+0.0976i 0.0682-0.9952i 0.4388-0.2412i 0.0146+0.6869i]
 [-0.5883+1.1873i -0.6854-0.4138i 0.0004-1.3585i -0.7774-0.5661i]
 [0.8496-0.8574i -0.1766+1.2697i -0.0060-0.2397i -1.6359+0.7692i]]

D.del_row(2); D =
[[-0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i]
 [-0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i]
 [0.7048+0.0976i 0.0682-0.9952i 0.4388-0.2412i 0.0146+0.6869i]
 [-0.5883+1.1873i -0.6854-0.4138i 0.0004-1.3585i -0.7774-0.5661i]
 [0.8496-0.8574i -0.1766+1.2697i -0.0060-0.2397i -1.6359+0.7692i]]
D.del_rows(0,2); D =
[[-0.5883+1.1873i -0.6854-0.4138i 0.0004-1.3585i -0.7774-0.5661i]
 [0.8496-0.8574i -0.1766+1.2697i -0.0060-0.2397i -1.6359+0.7692i]]
D.del_col(3); D =
[[-0.5883+1.1873i -0.6854-0.4138i 0.0004-1.3585i]
 [0.8496-0.8574i -0.1766+1.2697i -0.0060-0.2397i]]
D.del_cols(0,1); D =
[[0.0004-1.3585i]
 [-0.0060-0.2397i]]

A.ins_row(1, v); A =
[[-0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i]
 [-0.1872+1.4632i 0.4134-0.0812i -0.1511+0.7644i -0.7372-0.9940i]
 [-0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i]
 [-0.2915+0.7803i -0.2941-0.7994i 1.2962-0.1030i -0.8699-0.7039i]]
A.ins_col(0, v); A =
[[-0.1872+1.4632i -0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i]
 [0.4134-0.0812i -0.1872+1.4632i 0.4134-0.0812i -0.1511+0.7644i -0.7372-0.9940i]
 [-0.1511+0.7644i -0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i]
 [-0.7372-0.9940i -0.2915+0.7803i -0.2941-0.7994i 1.2962-0.1030i -0.8699-0.7039i]]
A.append_col(A2.get_col(3)); A =
[[-0.1872+1.4632i -0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i 0.2678-1.0849i]
 [0.4134-0.0812i -0.1872+1.4632i 0.4134-0.0812i -0.1511+0.7644i -0.7372-0.9940i -0.1511+0.7644i]
 [-0.1511+0.7644i -0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i 0.2044+0.9265i]
 [-0.7372-0.9940i -0.2915+0.7803i -0.2941-0.7994i 1.2962-0.1030i -0.8699-0.7039i 1.2962-0.1030i]]
A.append_row(A2.get_row(0)); A =
[[-0.1872+1.4632i -0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i 0.2678-1.0849i]
 [0.4134-0.0812i -0.1872+1.4632i 0.4134-0.0812i -0.1511+0.7644i -0.7372-0.9940i -0.1511+0.7644i]
 [-0.1511+0.7644i -0.1693-0.4322i -0.7615+1.6166i 0.2044+0.9265i -0.8061+0.6237i 0.2044+0.9265i]
 [-0.7372-0.9940i -0.2915+0.7803i -0.2941-0.7994i 1.2962-0.1030i -0.8699-0.7039i 1.2962-0.1030i]
 [-0.1872+1.4632i -0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i 0.2678-1.0849i]]

A+B =
[[0.5570-0.1156i -0.6069-1.0339i 0.7065-1.3261i -0.0787+0.9712i]
 [-0.7575+0.7551i -1.4469+1.2029i 0.2048-0.4320i -1.5835+0.0576i]
 [0.5581-0.0771i -0.4707+0.4703i 1.2902-0.3427i -2.5059+0.0653i]]
A+c =
[[-0.3202+0.4063i -0.8476+0.5808i 0.0954-0.4654i -0.2657+0.9038i]
 [-0.3417+0.1873i -0.9339+2.2362i 0.0320+1.5460i -0.9785+1.2432i]
 [-0.4638+1.3998i -0.4665-0.1798i 1.1239+0.5165i -1.0423-0.0844i]]
c+A =
[[-0.3202+0.4063i -0.8476+0.5808i 0.0954-0.4654i -0.2657+0.9038i]
 [-0.3417+0.1873i -0.9339+2.2362i 0.0320+1.5460i -0.9785+1.2432i]
 [-0.4638+1.3998i -0.4665-0.1798i 1.1239+0.5165i -1.0423-0.0844i]]
A+=B; A =
[[0.5570-0.1156i -0.6069-1.0339i 0.7065-1.3261i -0.0787+0.9712i]
 [-0.7575+0.7551i -1.4469+1.2029i 0.2048-0.4320i -1.5835+0.0576i]
 [0.5581-0.0771i -0.4707+0.4703i 1.2902-0.3427i -2.5059+0.0653i]]
A+=c; A =
[[-0.3202+0.4063i -0.8476+0.5808i 0.0954-0.4654i -0.2657+0.9038i]
 [-0.3417+0.1873i -0.9339+2.2362i 0.0320+1.5460i -0.9785+1.2432i]
 [-0.4638+1.3998i -0.4665-0.1798i 1.1239+0.5165i -1.0423-0.0844i]]

A-B =
[[-0.8526-0.3108i -0.7434+0.9565i -0.1710-0.8437i -0.1079-0.4026i]
 [0.4190-1.6196i -0.0761+2.0304i 0.2040+2.2850i -0.0288+1.1897i]
 [-1.1411+1.6377i -0.1175-2.0690i 1.3022+0.1366i 0.7660-1.4731i]]
A-c =
[[0.0246-0.8327i -0.5028-0.6583i 0.4401-1.7044i 0.0791-0.3352i]
 [0.0031-1.0518i -0.5891+0.9971i 0.3768+0.3070i -0.6337+0.0041i]
 [-0.1191+0.1608i -0.1217-1.4189i 1.4686-0.7225i -0.6976-1.3235i]]
c-A =
[[-0.0246+0.8327i 0.5028+0.6583i -0.4401+1.7044i -0.0791+0.3352i]
 [-0.0031+1.0518i 0.5891-0.9971i -0.3768-0.3070i 0.6337-0.0041i]
 [0.1191-0.1608i 0.1217+1.4189i -1.4686+0.7225i 0.6976+1.3235i]]
A-=B; A =
[[-0.8526-0.3108i -0.7434+0.9565i -0.1710-0.8437i -0.1079-0.4026i]
 [0.4190-1.6196i -0.0761+2.0304i 0.2040+2.2850i -0.0288+1.1897i]
 [-1.1411+1.6377i -0.1175-2.0690i 1.3022+0.1366i 0.7660-1.4731i]]
A-=c; A =
[[0.0246-0.8327i -0.5028-0.6583i 0.4401-1.7044i 0.0791-0.3352i]
 [0.0031-1.0518i -0.5891+0.9971i 0.3768+0.3070i -0.6337+0.0041i]
 [-0.1191+0.1608i -0.1217-1.4189i 1.4686-0.7225i -0.6976-1.3235i]]
-A =
[[0.1478+0.2132i 0.6752+0.0387i -0.2678+1.0849i 0.0933-0.2843i]
 [0.1693+0.4322i 0.7615-1.6166i -0.2044-0.9265i 0.8061-0.6237i]
 [0.2915-0.7803i 0.2941+0.7994i -1.2962+0.1030i 0.8699+0.7039i]]

A*C =
[[-0.2435-1.2050i 2.0976-0.3254i -0.2459+0.1736i]
 [3.2800-0.2249i -1.7882+3.0918i -0.5041+0.9135i]
 [1.1875+0.6806i 0.2075+0.0031i -0.1073-0.8181i]]
A*=C; A =
[[-0.2435-1.2050i 2.0976-0.3254i -0.2459+0.1736i]
 [3.2800-0.2249i -1.7882+3.0918i -0.5041+0.9135i]
 [1.1875+0.6806i 0.2075+0.0031i -0.1073-0.8181i]]
A*c =
[[0.1576-0.0548i 0.1404-0.4116i 0.6260+0.3529i -0.1600-0.1068i]
 [0.2970-0.0304i -0.8703-0.7504i -0.6092-0.0331i -0.2474-0.6069i]
 [-0.4332-0.3151i 0.5459-0.0444i -0.1596+0.8208i 0.5861-0.4176i]]
c*A =
[[0.1576-0.0548i 0.1404-0.4116i 0.6260+0.3529i -0.1600-0.1068i]
 [0.2970-0.0304i -0.8703-0.7504i -0.6092-0.0331i -0.2474-0.6069i]
 [-0.4332-0.3151i 0.5459-0.0444i -0.1596+0.8208i 0.5861-0.4176i]]
A*=c; A =
[[0.1576-0.0548i 0.1404-0.4116i 0.6260+0.3529i -0.1600-0.1068i]
 [0.2970-0.0304i -0.8703-0.7504i -0.6092-0.0331i -0.2474-0.6069i]
 [-0.4332-0.3151i 0.5459-0.0444i -0.1596+0.8208i 0.5861-0.4176i]]
A*v = [1.1976+0.1143i 0.9556+0.9211i -1.4492+1.5110i]
A2 = [[-0.1478-0.2132i -0.6752-0.0387i 0.2678-1.0849i -0.0933+0.2843i]]; u*A2 =
[[0.0051-0.0603i -0.1158-0.1073i 0.2094-0.1555i -0.0590+0.0373i]
 [-0.3341+0.2687i 0.0156+1.1177i -1.8201-0.3138i 0.4797+0.1204i]
 [0.1146+0.0183i 0.2216-0.2059i 0.2672+0.4225i -0.0629-0.1182i]]
elem_mult(A,B) =
[[-0.0833-0.1647i -0.0846+0.6693i -0.1442-0.5406i -0.1966-0.0600i]
 [0.6128+0.0533i 1.1908-0.7930i 1.2587-0.2774i 0.9797-0.0285i]
 [0.4214+0.9129i 1.0669-0.2323i -0.0325-0.3100i 1.9646+0.4824i]]
elem_mult_out(A,B,out); out =
[[-0.0833-0.1647i -0.0846+0.6693i -0.1442-0.5406i -0.1966-0.0600i]
 [0.6128+0.0533i 1.1908-0.7930i 1.2587-0.2774i 0.9797-0.0285i]
 [0.4214+0.9129i 1.0669-0.2323i -0.0325-0.3100i 1.9646+0.4824i]]
elem_mult_inplace(A,B); B =
[[-0.0833-0.1647i -0.0846+0.6693i -0.1442-0.5406i -0.1966-0.0600i]
 [0.6128+0.0533i 1.1908-0.7930i 1.2587-0.2774i 0.9797-0.0285i]
 [0.4214+0.9129i 1.0669-0.2323i -0.0325-0.3100i 1.9646+0.4824i]]
elem_mult_sum(A,B) = 6.9537-0.2884i

A/c =
[[-0.2578+0.3103i 0.2234+1.0277i -1.7369+0.0511i 0.4648+0.0213i]
 [-0.5770+0.4338i 2.7394+0.4669i 1.3028-0.6925i 1.2704+0.9477i]
 [1.2905+0.1114i -1.0750+0.7739i -0.6947-1.8990i -0.6919+1.5967i]]
A/=c; A =
[[-0.2578+0.3103i 0.2234+1.0277i -1.7369+0.0511i 0.4648+0.0213i]
 [-0.5770+0.4338i 2.7394+0.4669i 1.3028-0.6925i 1.2704+0.9477i]
 [1.2905+0.1114i -1.0750+0.7739i -0.6947-1.8990i -0.6919+1.5967i]]
A/=B; A =
[[-0.2468-0.2683i -0.0076-0.6779i 1.5124-1.6412i 0.4108+0.1446i]
 [-0.2356+0.2593i -0.2293-2.2203i -0.6820+0.1507i 0.2959-1.0178i]
 [-0.6292+0.2835i -0.5860+0.3132i 0.2943+5.4161i 0.2698+0.5571i]]
elem_div(A,B) =
[[-0.2468-0.2683i -0.0076-0.6779i 1.5124-1.6412i 0.4108+0.1446i]
 [-0.2356+0.2593i -0.2293-2.2203i -0.6820+0.1507i 0.2959-1.0178i]
 [-0.6292+0.2835i -0.5860+0.3132i 0.2943+5.4161i 0.2698+0.5571i]]
elem_div_out(A,B,out); out =
[[-0.2468-0.2683i -0.0076-0.6779i 1.5124-1.6412i 0.4108+0.1446i]
 [-0.2356+0.2593i -0.2293-2.2203i -0.6820+0.1507i 0.2959-1.0178i]
 [-0.6292+0.2835i -0.5860+0.3132i 0.2943+5.4161i 0.2698+0.5571i]]
elem_div_sum(A,B) = 0.1668+1.2990i

========================================
   Testing initialisation with string
========================================
bmat M = " 1 1 0; 0 1; 1 1 ,1,   1; ; 0 1"
M =
[[1 1 0 0]
 [0 1 0 0]
 [1 1 1 1]
 [0 0 0 0]
 [0 1 0 0]]
smat M = "0xFF, -021 ,   100; 0,-0x01; 0xA, 10 012;  "
M =
[[255 -17 100]
 [0 -1 0]
 [10 10 10]]
imat M = "0xFAC0, -021, 100000; 0,-0x01; 0xA, 10 012; "
M =
[[64192 -17 100000]
 [0 -1 0]
 [10 10 10]]
mat M = ".77 1e9 35; 0x7 3.5 -1000 "M =
[[0.7700 189000.0000 35.0000]
 [7.0000 3.5000 -1000.0000]]
cmat M = " 1.5+3i, (.33,1) ;  (333,-1) 2-0.2E-3i"
M =
[[1.5000+3.0000i 0.3300+1.0000i]
 [333.0000-1.0000i 2.0000-0.0002i]]

