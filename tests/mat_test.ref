=============================
   Testing Mat<bin> (bmat)
=============================
A =
[[0 1 0 0]
 [0 0 1 1]
 [1 1 0 1]]
B =
[[0 1 0 1]
 [0 0 0 0]
 [1 0 0 1]]
C =
[[0 1 0]
 [0 0 1]
 [0 1 1]
 [0 1 1]]
v = [1 1 0 1]
u = [1 0 1]
c = 1

A(1,2) = 1
A(2,3) = 1
A(6) = 0
A(0,2,1,3) =
[[1 0 0]
 [0 1 1]
 [1 0 1]]
A.get_row(1) = [0 0 1 1]
A.get_rows(1,2) =
[[0 0 1 1]
 [1 1 0 1]]
A.get_col(2) = [0 1 0]
A.get_cols(2,3) =
[[0 0]
 [1 1]
 [0 1]]

Mv(A) =
[[1]
 [1]
 [0]
 [1]]
D(A) =
[[0 1 0 0]
 [0 0 1 1]
 [1 1 0 1]]
D.set_size(6,5, true); D =
[[0 1 0 0 0]
 [0 0 1 1 0]
 [1 1 0 1 0]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]]
D.set_size(3,2, true); D =
[[0 1]
 [0 0]
 [1 1]]
D.zeros(); D =
[[0 0]
 [0 0]
 [0 0]]
D.ones(); D =
[[1 1]
 [1 1]
 [1 1]]
D = A; D =
[[0 1 0 0]
 [0 0 1 1]
 [1 1 0 1]]
D(2,2) = c; D =
[[0 1 0 0]
 [0 0 1 1]
 [1 1 1 1]]
D(7) = c; D =
[[0 1 0 1]
 [0 0 1 1]
 [1 1 1 1]]
D.set(0,1, c); D =
[[0 1 0 1]
 [0 0 1 1]
 [1 1 1 1]]
D.set_row(1, v); D =
[[0 1 0 1]
 [1 1 0 1]
 [1 1 1 1]]
D.set_col(2, u): D =
[[0 1 1 1]
 [1 1 0 1]
 [1 1 1 1]]
D.set_rows(0, B.get_rows(1,2)); D =
[[0 0 0 0]
 [1 0 0 1]
 [1 1 1 1]]
D.set_cols(2, B.get_cols(0,1)); D =
[[0 0 0 1]
 [1 0 0 0]
 [1 1 1 0]]
D.copy_row(1, 2); D =
[[0 0 0 1]
 [1 1 1 0]
 [1 1 1 0]]
D.copy_col(2, 3); D =
[[0 0 1 1]
 [1 1 0 0]
 [1 1 0 0]]
D.swap_rows(0, 2); D =
[[1 1 0 0]
 [1 1 0 0]
 [0 0 1 1]]
D.swap_cols(0, 3); D =
[[0 1 0 1]
 [0 1 0 1]
 [1 0 1 0]]
D.set_submatrix(1,2, A(0,1,0,1); D =
[[0 1 0 1]
 [0 1 0 1]
 [1 0 0 0]]
D.set_submatrix(0,0, A(0,1,0,1); D =
[[0 1 0 1]
 [0 0 0 1]
 [1 0 0 0]]
D.set_submatrix(1,2,2,3, c); D =
[[0 1 0 1]
 [0 0 1 1]
 [1 0 1 1]]

A.T() =
[[0 0 1]
 [1 0 1]
 [0 1 0]
 [0 1 1]]
A.T().T() =
[[0 1 0 0]
 [0 0 1 1]
 [1 1 0 1]]
A.H() =
[[0 0 1]
 [1 0 1]
 [0 1 0]
 [0 1 1]]

D = concat_horizontal(A,B); D =
[[0 1 0 0 0 1 0 1]
 [0 0 1 1 0 0 0 0]
 [1 1 0 1 1 0 0 1]]
D = concat_vertical(A,B); D =
[[0 1 0 0]
 [0 0 1 1]
 [1 1 0 1]
 [0 1 0 1]
 [0 0 0 0]
 [1 0 0 1]]

D.del_row(2); D =
[[0 1 0 0]
 [0 0 1 1]
 [0 1 0 1]
 [0 0 0 0]
 [1 0 0 1]]
D.del_rows(0,2); D =
[[0 0 0 0]
 [1 0 0 1]]
D.del_col(3); D =
[[0 0 0]
 [1 0 0]]
D.del_cols(0,1); D =
[[0]
 [0]]

A.ins_row(1, v); A =
[[0 1 0 0]
 [1 1 0 1]
 [0 0 1 1]
 [1 1 0 1]]
A.ins_col(0, v); A =
[[1 0 1 0 0]
 [1 1 1 0 1]
 [0 0 0 1 1]
 [1 1 1 0 1]]
A.append_col(A2.get_col(3)); A =
[[1 0 1 0 0 0]
 [1 1 1 0 1 0]
 [0 0 0 1 1 1]
 [1 1 1 0 1 0]]
A.append_row(A2.get_row(0)); A =
[[1 0 1 0 0 0]
 [1 1 1 0 1 0]
 [0 0 0 1 1 1]
 [1 1 1 0 1 0]
 [1 0 1 0 0 0]]

A+B =
[[0 0 0 1]
 [0 0 1 1]
 [0 1 0 0]]
A+c =
[[1 0 1 1]
 [1 1 0 0]
 [0 0 1 0]]
c+A =
[[1 0 1 1]
 [1 1 0 0]
 [0 0 1 0]]
A+=B; A =
[[0 0 0 1]
 [0 0 1 1]
 [0 1 0 0]]
A+=c; A =
[[1 0 1 1]
 [1 1 0 0]
 [0 0 1 0]]

A-B =
[[0 0 0 1]
 [0 0 1 1]
 [0 1 0 0]]
A-c =
[[1 0 1 1]
 [1 1 0 0]
 [0 0 1 0]]
c-A =
[[1 0 1 1]
 [1 1 0 0]
 [0 0 1 0]]
A-=B; A =
[[0 0 0 1]
 [0 0 1 1]
 [0 1 0 0]]
A-=c; A =
[[1 0 1 1]
 [1 1 0 0]
 [0 0 1 0]]
-A =
[[0 1 0 0]
 [0 0 1 1]
 [1 1 0 1]]

A*C =
[[0 0 1]
 [0 0 0]
 [0 0 0]]
A*=C; A =
[[0 0 1]
 [0 0 0]
 [0 0 0]]
A*c =
[[0 1 0 0]
 [0 0 1 1]
 [1 1 0 1]]
c*A =
[[0 1 0 0]
 [0 0 1 1]
 [1 1 0 1]]
A*=c; A =
[[0 1 0 0]
 [0 0 1 1]
 [1 1 0 1]]
A*v = [1 1 1]
elem_mult(A,B) =
[[0 1 0 0]
 [0 0 0 0]
 [1 0 0 1]]
elem_mult_out(A,B,out); out =
[[0 1 0 0]
 [0 0 0 0]
 [1 0 0 1]]
elem_mult_inplace(A,B); B =
[[0 1 0 0]
 [0 0 0 0]
 [1 0 0 1]]
elem_mult_sum(A,B) = 1

A/c =
[[1 1 1 1]
 [1 1 1 1]
 [1 1 1 1]]
A/=c; A =
[[1 1 1 1]
 [1 1 1 1]
 [1 1 1 1]]
A/=B; A =
[[0 1 0 1]
 [0 0 1 1]
 [1 1 0 1]]
elem_div(A,B) =
[[0 1 0 1]
 [0 0 1 1]
 [1 1 0 1]]
elem_div_out(A,B,out); out =
[[0 1 0 1]
 [0 0 1 1]
 [1 1 0 1]]
elem_div_sum(A,B) = 1

=============================
   Testing Mat<int> (imat)
=============================
A =
[[6 7 4 2]
 [7 9 1 5]
 [7 9 4 1]]
B =
[[2 7 7 2]
 [4 2 9 1]
 [7 8 9 8]]
C =
[[2 4 7]
 [5 1 4]
 [5 9 8]
 [6 2 2]]
v = [2 4 4 8]
u = [1 3 7]
c = 1

A(1,2) = 1
A(2,3) = 1
A(6) = 4
A(0,2,1,3) =
[[7 4 2]
 [9 1 5]
 [9 4 1]]
A.get_row(1) = [7 9 1 5]
A.get_rows(1,2) =
[[7 9 1 5]
 [7 9 4 1]]
A.get_col(2) = [4 1 4]
A.get_cols(2,3) =
[[4 2]
 [1 5]
 [4 1]]

Mv(A) =
[[2]
 [4]
 [4]
 [8]]
D(A) =
[[6 7 4 2]
 [7 9 1 5]
 [7 9 4 1]]
D.set_size(6,5, true); D =
[[6 7 4 2 0]
 [7 9 1 5 0]
 [7 9 4 1 0]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]]
D.set_size(3,2, true); D =
[[6 7]
 [7 9]
 [7 9]]
D.zeros(); D =
[[0 0]
 [0 0]
 [0 0]]
D.ones(); D =
[[1 1]
 [1 1]
 [1 1]]
D = A; D =
[[6 7 4 2]
 [7 9 1 5]
 [7 9 4 1]]
D(2,2) = c; D =
[[6 7 4 2]
 [7 9 1 5]
 [7 9 1 1]]
D(7) = c; D =
[[6 7 4 1]
 [7 9 1 5]
 [7 9 1 1]]
D.set(0,1, c); D =
[[6 1 4 1]
 [7 9 1 5]
 [7 9 1 1]]
D.set_row(1, v); D =
[[6 1 4 1]
 [2 4 4 8]
 [7 9 1 1]]
D.set_col(2, u): D =
[[6 1 1 1]
 [2 4 3 8]
 [7 9 7 1]]
D.set_rows(0, B.get_rows(1,2)); D =
[[4 2 9 1]
 [7 8 9 8]
 [7 9 7 1]]
D.set_cols(2, B.get_cols(0,1)); D =
[[4 2 2 7]
 [7 8 4 2]
 [7 9 7 8]]
D.copy_row(1, 2); D =
[[4 2 2 7]
 [7 9 7 8]
 [7 9 7 8]]
D.copy_col(2, 3); D =
[[4 2 7 7]
 [7 9 8 8]
 [7 9 8 8]]
D.swap_rows(0, 2); D =
[[7 9 8 8]
 [7 9 8 8]
 [4 2 7 7]]
D.swap_cols(0, 3); D =
[[8 9 8 7]
 [8 9 8 7]
 [7 2 7 4]]
D.set_submatrix(1,2, A(0,1,0,1); D =
[[8 9 8 7]
 [8 9 6 7]
 [7 2 7 9]]
D.set_submatrix(0,0, A(0,1,0,1); D =
[[6 7 8 7]
 [7 9 6 7]
 [7 2 7 9]]
D.set_submatrix(1,2,2,3, c); D =
[[6 7 8 7]
 [7 9 1 1]
 [7 2 1 1]]

A.T() =
[[6 7 7]
 [7 9 9]
 [4 1 4]
 [2 5 1]]
A.T().T() =
[[6 7 4 2]
 [7 9 1 5]
 [7 9 4 1]]
A.H() =
[[6 7 7]
 [7 9 9]
 [4 1 4]
 [2 5 1]]

D = concat_horizontal(A,B); D =
[[6 7 4 2 2 7 7 2]
 [7 9 1 5 4 2 9 1]
 [7 9 4 1 7 8 9 8]]
D = concat_vertical(A,B); D =
[[6 7 4 2]
 [7 9 1 5]
 [7 9 4 1]
 [2 7 7 2]
 [4 2 9 1]
 [7 8 9 8]]

D.del_row(2); D =
[[6 7 4 2]
 [7 9 1 5]
 [2 7 7 2]
 [4 2 9 1]
 [7 8 9 8]]
D.del_rows(0,2); D =
[[4 2 9 1]
 [7 8 9 8]]
D.del_col(3); D =
[[4 2 9]
 [7 8 9]]
D.del_cols(0,1); D =
[[9]
 [9]]

A.ins_row(1, v); A =
[[6 7 4 2]
 [2 4 4 8]
 [7 9 1 5]
 [7 9 4 1]]
A.ins_col(0, v); A =
[[2 6 7 4 2]
 [4 2 4 4 8]
 [4 7 9 1 5]
 [8 7 9 4 1]]
A.append_col(A2.get_col(3)); A =
[[2 6 7 4 2 4]
 [4 2 4 4 8 4]
 [4 7 9 1 5 1]
 [8 7 9 4 1 4]]
A.append_row(A2.get_row(0)); A =
[[2 6 7 4 2 4]
 [4 2 4 4 8 4]
 [4 7 9 1 5 1]
 [8 7 9 4 1 4]
 [2 6 7 4 2 4]]

A+B =
[[8 14 11 4]
 [11 11 10 6]
 [14 17 13 9]]
A+c =
[[7 8 5 3]
 [8 10 2 6]
 [8 10 5 2]]
c+A =
[[7 8 5 3]
 [8 10 2 6]
 [8 10 5 2]]
A+=B; A =
[[8 14 11 4]
 [11 11 10 6]
 [14 17 13 9]]
A+=c; A =
[[7 8 5 3]
 [8 10 2 6]
 [8 10 5 2]]

A-B =
[[4 0 -3 0]
 [3 7 -8 4]
 [0 1 -5 -7]]
A-c =
[[5 6 3 1]
 [6 8 0 4]
 [6 8 3 0]]
c-A =
[[-5 -6 -3 -1]
 [-6 -8 0 -4]
 [-6 -8 -3 0]]
A-=B; A =
[[4 0 -3 0]
 [3 7 -8 4]
 [0 1 -5 -7]]
A-=c; A =
[[5 6 3 1]
 [6 8 0 4]
 [6 8 3 0]]
-A =
[[-6 -7 -4 -2]
 [-7 -9 -1 -5]
 [-7 -9 -4 -1]]

A*C =
[[79 71 106]
 [94 56 103]
 [85 75 119]]
A*=C; A =
[[79 71 106]
 [94 56 103]
 [85 75 119]]
A*c =
[[6 7 4 2]
 [7 9 1 5]
 [7 9 4 1]]
c*A =
[[6 7 4 2]
 [7 9 1 5]
 [7 9 4 1]]
A*=c; A =
[[6 7 4 2]
 [7 9 1 5]
 [7 9 4 1]]
A*v = [72 94 74]
elem_mult(A,B) =
[[12 49 28 4]
 [28 18 9 5]
 [49 72 36 8]]
elem_mult_out(A,B,out); out =
[[12 49 28 4]
 [28 18 9 5]
 [49 72 36 8]]
elem_mult_inplace(A,B); B =
[[12 49 28 4]
 [28 18 9 5]
 [49 72 36 8]]
elem_mult_sum(A,B) = 318

A/c =
[[6 7 4 2]
 [7 9 1 5]
 [7 9 4 1]]
A/=c; A =
[[6 7 4 2]
 [7 9 1 5]
 [7 9 4 1]]
A/=B; A =
[[3 1 0 1]
 [1 4 0 5]
 [1 1 0 0]]
elem_div(A,B) =
[[3 1 0 1]
 [1 4 0 5]
 [1 1 0 0]]
elem_div_out(A,B,out); out =
[[3 1 0 1]
 [1 4 0 5]
 [1 1 0 0]]
elem_div_sum(A,B) = 17

===============================
   Testing Mat<double> (mat)
===============================
A =
[[0.1234 1.2743 1.1834 -1.7663]
 [-0.4214 -0.3288 -0.6750 0.4802]
 [0.4191 1.3636 -0.9017 0.0332]]
B =
[[-0.2567 -0.5088 -0.4178 0.1706]
 [-1.2206 0.8674 0.9549 -1.2123]
 [0.8783 0.7170 -0.6730 -0.0915]]
C =
[[0.7976 0.7505 1.3572]
 [0.9149 -0.3301 0.3954]
 [0.4963 -0.5321 -0.2344]
 [-1.1868 1.3540 -2.9390]]
v = [-0.2557 0.1911 0.6102 1.0398]
u = [-0.6095 -0.2460 -0.9425]
c = 0.5281

A(1,2) = -0.6750
A(2,3) = 0.0332
A(6) = 1.1834
A(0,2,1,3) =
[[1.2743 1.1834 -1.7663]
 [-0.3288 -0.6750 0.4802]
 [1.3636 -0.9017 0.0332]]
A.get_row(1) = [-0.4214 -0.3288 -0.6750 0.4802]
A.get_rows(1,2) =
[[-0.4214 -0.3288 -0.6750 0.4802]
 [0.4191 1.3636 -0.9017 0.0332]]
A.get_col(2) = [1.1834 -0.6750 -0.9017]
A.get_cols(2,3) =
[[1.1834 -1.7663]
 [-0.6750 0.4802]
 [-0.9017 0.0332]]

Mv(A) =
[[-0.2557]
 [0.1911]
 [0.6102]
 [1.0398]]
D(A) =
[[0.1234 1.2743 1.1834 -1.7663]
 [-0.4214 -0.3288 -0.6750 0.4802]
 [0.4191 1.3636 -0.9017 0.0332]]
D.set_size(6,5, true); D =
[[0.1234 1.2743 1.1834 -1.7663 0.0000]
 [-0.4214 -0.3288 -0.6750 0.4802 0.0000]
 [0.4191 1.3636 -0.9017 0.0332 0.0000]
 [0.0000 0.0000 0.0000 0.0000 0.0000]
 [0.0000 0.0000 0.0000 0.0000 0.0000]
 [0.0000 0.0000 0.0000 0.0000 0.0000]]
D.set_size(3,2, true); D =
[[0.1234 1.2743]
 [-0.4214 -0.3288]
 [0.4191 1.3636]]
D.zeros(); D =
[[0.0000 0.0000]
 [0.0000 0.0000]
 [0.0000 0.0000]]
D.ones(); D =
[[1.0000 1.0000]
 [1.0000 1.0000]
 [1.0000 1.0000]]
D = A; D =
[[0.1234 1.2743 1.1834 -1.7663]
 [-0.4214 -0.3288 -0.6750 0.4802]
 [0.4191 1.3636 -0.9017 0.0332]]
D(2,2) = c; D =
[[0.1234 1.2743 1.1834 -1.7663]
 [-0.4214 -0.3288 -0.6750 0.4802]
 [0.4191 1.3636 0.5281 0.0332]]
D(7) = c; D =
[[0.1234 1.2743 1.1834 0.5281]
 [-0.4214 -0.3288 -0.6750 0.4802]
 [0.4191 1.3636 0.5281 0.0332]]
D.set(0,1, c); D =
[[0.1234 0.5281 1.1834 0.5281]
 [-0.4214 -0.3288 -0.6750 0.4802]
 [0.4191 1.3636 0.5281 0.0332]]
D.set_row(1, v); D =
[[0.1234 0.5281 1.1834 0.5281]
 [-0.2557 0.1911 0.6102 1.0398]
 [0.4191 1.3636 0.5281 0.0332]]
D.set_col(2, u): D =
[[0.1234 0.5281 -0.6095 0.5281]
 [-0.2557 0.1911 -0.2460 1.0398]
 [0.4191 1.3636 -0.9425 0.0332]]
D.set_rows(0, B.get_rows(1,2)); D =
[[-1.2206 0.8674 0.9549 -1.2123]
 [0.8783 0.7170 -0.6730 -0.0915]
 [0.4191 1.3636 -0.9425 0.0332]]
D.set_cols(2, B.get_cols(0,1)); D =
[[-1.2206 0.8674 -0.2567 -0.5088]
 [0.8783 0.7170 -1.2206 0.8674]
 [0.4191 1.3636 0.8783 0.7170]]
D.copy_row(1, 2); D =
[[-1.2206 0.8674 -0.2567 -0.5088]
 [0.4191 1.3636 0.8783 0.7170]
 [0.4191 1.3636 0.8783 0.7170]]
D.copy_col(2, 3); D =
[[-1.2206 0.8674 -0.5088 -0.5088]
 [0.4191 1.3636 0.7170 0.7170]
 [0.4191 1.3636 0.7170 0.7170]]
D.swap_rows(0, 2); D =
[[0.4191 1.3636 0.7170 0.7170]
 [0.4191 1.3636 0.7170 0.7170]
 [-1.2206 0.8674 -0.5088 -0.5088]]
D.swap_cols(0, 3); D =
[[0.7170 1.3636 0.7170 0.4191]
 [0.7170 1.3636 0.7170 0.4191]
 [-0.5088 0.8674 -0.5088 -1.2206]]
D.set_submatrix(1,2, A(0,1,0,1); D =
[[0.7170 1.3636 0.7170 0.4191]
 [0.7170 1.3636 0.1234 1.2743]
 [-0.5088 0.8674 -0.4214 -0.3288]]
D.set_submatrix(0,0, A(0,1,0,1); D =
[[0.1234 1.2743 0.7170 0.4191]
 [-0.4214 -0.3288 0.1234 1.2743]
 [-0.5088 0.8674 -0.4214 -0.3288]]
D.set_submatrix(1,2,2,3, c); D =
[[0.1234 1.2743 0.7170 0.4191]
 [-0.4214 -0.3288 0.5281 0.5281]
 [-0.5088 0.8674 0.5281 0.5281]]

A.T() =
[[0.1234 -0.4214 0.4191]
 [1.2743 -0.3288 1.3636]
 [1.1834 -0.6750 -0.9017]
 [-1.7663 0.4802 0.0332]]
A.T().T() =
[[0.1234 1.2743 1.1834 -1.7663]
 [-0.4214 -0.3288 -0.6750 0.4802]
 [0.4191 1.3636 -0.9017 0.0332]]
A.H() =
[[0.1234 -0.4214 0.4191]
 [1.2743 -0.3288 1.3636]
 [1.1834 -0.6750 -0.9017]
 [-1.7663 0.4802 0.0332]]

D = concat_horizontal(A,B); D =
[[0.1234 1.2743 1.1834 -1.7663 -0.2567 -0.5088 -0.4178 0.1706]
 [-0.4214 -0.3288 -0.6750 0.4802 -1.2206 0.8674 0.9549 -1.2123]
 [0.4191 1.3636 -0.9017 0.0332 0.8783 0.7170 -0.6730 -0.0915]]
D = concat_vertical(A,B); D =
[[0.1234 1.2743 1.1834 -1.7663]
 [-0.4214 -0.3288 -0.6750 0.4802]
 [0.4191 1.3636 -0.9017 0.0332]
 [-0.2567 -0.5088 -0.4178 0.1706]
 [-1.2206 0.8674 0.9549 -1.2123]
 [0.8783 0.7170 -0.6730 -0.0915]]

D.del_row(2); D =
[[0.1234 1.2743 1.1834 -1.7663]
 [-0.4214 -0.3288 -0.6750 0.4802]
 [-0.2567 -0.5088 -0.4178 0.1706]
 [-1.2206 0.8674 0.9549 -1.2123]
 [0.8783 0.7170 -0.6730 -0.0915]]
D.del_rows(0,2); D =
[[-1.2206 0.8674 0.9549 -1.2123]
 [0.8783 0.7170 -0.6730 -0.0915]]
D.del_col(3); D =
[[-1.2206 0.8674 0.9549]
 [0.8783 0.7170 -0.6730]]
D.del_cols(0,1); D =
[[0.9549]
 [-0.6730]]

A.ins_row(1, v); A =
[[0.1234 1.2743 1.1834 -1.7663]
 [-0.2557 0.1911 0.6102 1.0398]
 [-0.4214 -0.3288 -0.6750 0.4802]
 [0.4191 1.3636 -0.9017 0.0332]]
A.ins_col(0, v); A =
[[-0.2557 0.1234 1.2743 1.1834 -1.7663]
 [0.1911 -0.2557 0.1911 0.6102 1.0398]
 [0.6102 -0.4214 -0.3288 -0.6750 0.4802]
 [1.0398 0.4191 1.3636 -0.9017 0.0332]]
A.append_col(A2.get_col(3)); A =
[[-0.2557 0.1234 1.2743 1.1834 -1.7663 1.1834]
 [0.1911 -0.2557 0.1911 0.6102 1.0398 0.6102]
 [0.6102 -0.4214 -0.3288 -0.6750 0.4802 -0.6750]
 [1.0398 0.4191 1.3636 -0.9017 0.0332 -0.9017]]
A.append_row(A2.get_row(0)); A =
[[-0.2557 0.1234 1.2743 1.1834 -1.7663 1.1834]
 [0.1911 -0.2557 0.1911 0.6102 1.0398 0.6102]
 [0.6102 -0.4214 -0.3288 -0.6750 0.4802 -0.6750]
 [1.0398 0.4191 1.3636 -0.9017 0.0332 -0.9017]
 [-0.2557 0.1234 1.2743 1.1834 -1.7663 1.1834]]

A+B =
[[-0.1333 0.7655 0.7657 -1.5957]
 [-1.6419 0.5386 0.2798 -0.7321]
 [1.2974 2.0805 -1.5747 -0.0583]]
A+c =
[[0.6515 1.8024 1.7116 -1.2382]
 [0.1067 0.1993 -0.1469 1.0083]
 [0.9472 1.8917 -0.3736 0.5613]]
c+A =
[[0.6515 1.8024 1.7116 -1.2382]
 [0.1067 0.1993 -0.1469 1.0083]
 [0.9472 1.8917 -0.3736 0.5613]]
A+=B; A =
[[-0.1333 0.7655 0.7657 -1.5957]
 [-1.6419 0.5386 0.2798 -0.7321]
 [1.2974 2.0805 -1.5747 -0.0583]]
A+=c; A =
[[0.6515 1.8024 1.7116 -1.2382]
 [0.1067 0.1993 -0.1469 1.0083]
 [0.9472 1.8917 -0.3736 0.5613]]

A-B =
[[0.3801 1.7831 1.6012 -1.9369]
 [0.7992 -1.1962 -1.6299 1.6925]
 [-0.4592 0.6466 -0.2286 0.1247]]
A-c =
[[-0.4047 0.7462 0.6553 -2.2944]
 [-0.9495 -0.8569 -1.2031 -0.0479]
 [-0.1090 0.8354 -1.4298 -0.4949]]
c-A =
[[0.4047 -0.7462 -0.6553 2.2944]
 [0.9495 0.8569 1.2031 0.0479]
 [0.1090 -0.8354 1.4298 0.4949]]
A-=B; A =
[[0.3801 1.7831 1.6012 -1.9369]
 [0.7992 -1.1962 -1.6299 1.6925]
 [-0.4592 0.6466 -0.2286 0.1247]]
A-=c; A =
[[-0.4047 0.7462 0.6553 -2.2944]
 [-0.9495 -0.8569 -1.2031 -0.0479]
 [-0.1090 0.8354 -1.4298 -0.4949]]
-A =
[[-0.1234 -1.2743 -1.1834 1.7663]
 [0.4214 0.3288 0.6750 -0.4802]
 [-0.4191 -1.3636 0.9017 -0.0332]]

A*C =
[[3.9478 -3.3493 5.5850]
 [-1.5418 0.8017 -1.9550]
 [1.0949 0.3891 1.2216]]
A*=C; A =
[[3.9478 -3.3493 5.5850]
 [-1.5418 0.8017 -1.9550]
 [1.0949 0.3891 1.2216]]
A*c =
[[0.0652 0.6730 0.6250 -0.9328]
 [-0.2225 -0.1737 -0.3565 0.2536]
 [0.2213 0.7201 -0.4762 0.0175]]
c*A =
[[0.0652 0.6730 0.6250 -0.9328]
 [-0.2225 -0.1737 -0.3565 0.2536]
 [0.2213 0.7201 -0.4762 0.0175]]
A*=c; A =
[[0.0652 0.6730 0.6250 -0.9328]
 [-0.2225 -0.1737 -0.3565 0.2536]
 [0.2213 0.7201 -0.4762 0.0175]]
A*v = [-0.9025 0.1324 -0.3622]
elem_mult(A,B) =
[[-0.0317 -0.6484 -0.4944 -0.3013]
 [0.5143 -0.2852 -0.6445 -0.5822]
 [0.3681 0.9776 0.6068 -0.0030]]
elem_mult_out(A,B,out); out =
[[-0.0317 -0.6484 -0.4944 -0.3013]
 [0.5143 -0.2852 -0.6445 -0.5822]
 [0.3681 0.9776 0.6068 -0.0030]]
elem_mult_inplace(A,B); B =
[[-0.0317 -0.6484 -0.4944 -0.3013]
 [0.5143 -0.2852 -0.6445 -0.5822]
 [0.3681 0.9776 0.6068 -0.0030]]
elem_mult_sum(A,B) = -0.5239

A/c =
[[0.2337 2.4129 2.2409 -3.3445]
 [-0.7979 -0.6226 -1.2782 0.9093]
 [0.7936 2.5819 -1.7073 0.0629]]
A/=c; A =
[[0.2337 2.4129 2.2409 -3.3445]
 [-0.7979 -0.6226 -1.2782 0.9093]
 [0.7936 2.5819 -1.7073 0.0629]]
A/=B; A =
[[-0.4807 -2.5045 -2.8327 -10.3532]
 [0.3452 -0.3791 -0.7069 -0.3961]
 [0.4772 1.9018 1.3397 -0.3630]]
elem_div(A,B) =
[[-0.4807 -2.5045 -2.8327 -10.3532]
 [0.3452 -0.3791 -0.7069 -0.3961]
 [0.4772 1.9018 1.3397 -0.3630]]
elem_div_out(A,B,out); out =
[[-0.4807 -2.5045 -2.8327 -10.3532]
 [0.3452 -0.3791 -0.7069 -0.3961]
 [0.4772 1.9018 1.3397 -0.3630]]
elem_div_sum(A,B) = -13.9522

==========================================
   Testing Mat<complex<double> > (cmat)
==========================================
A =
[[-0.4338-0.2881i 1.3078+0.6448i 0.2890+0.3665i 0.1669+0.1394i]
 [0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i]
 [-0.4972+0.3697i 0.2482-0.1109i -0.5533+0.0174i 0.2146-0.6056i]]
B =
[[0.5440-0.6395i 0.8781-0.4015i 0.0172-0.3043i -0.0309-0.1823i]
 [-0.0358+0.7264i -0.3674+0.6897i 0.4752+0.1366i 0.5401-0.2073i]
 [0.0142-1.1533i 0.8268-0.5409i -0.3031+0.8992i -0.6724-0.3295i]]
C =
[[2.2539-0.1707i 0.5599+0.0018i -0.2932+0.6636i]
 [-0.2552+1.6929i 0.2429+0.5431i 0.8948+0.3038i]
 [0.4983-0.5504i -0.6127+0.5881i -1.0207-0.9513i]
 [0.3383-0.3003i 1.6579-0.3930i -1.0423-0.3862i]]
v = [0.3357+0.7476i 0.1581+0.5101i 1.0024-0.2294i 0.0881-0.5844i]
u = [-0.3737+0.4055i 0.3010+0.5067i 0.9604+0.9759i]
c = 0.1265-0.1893i

A(1,2) = 0.8402+0.3585i
A(2,3) = 0.2146-0.6056i
A(6) = 0.2890+0.3665i
A(0,2,1,3) =
[[1.3078+0.6448i 0.2890+0.3665i 0.1669+0.1394i]
 [-0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i]
 [0.2482-0.1109i -0.5533+0.0174i 0.2146-0.6056i]]
A.get_row(1) = [0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i]
A.get_rows(1,2) =
[[0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i]
 [-0.4972+0.3697i 0.2482-0.1109i -0.5533+0.0174i 0.2146-0.6056i]]
A.get_col(2) = [0.2890+0.3665i 0.8402+0.3585i -0.5533+0.0174i]
A.get_cols(2,3) =
[[0.2890+0.3665i 0.1669+0.1394i]
 [0.8402+0.3585i -0.3050+1.6777i]
 [-0.5533+0.0174i 0.2146-0.6056i]]

Mv(A) =
[[0.3357+0.7476i]
 [0.1581+0.5101i]
 [1.0024-0.2294i]
 [0.0881-0.5844i]]
D(A) =
[[-0.4338-0.2881i 1.3078+0.6448i 0.2890+0.3665i 0.1669+0.1394i]
 [0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i]
 [-0.4972+0.3697i 0.2482-0.1109i -0.5533+0.0174i 0.2146-0.6056i]]
D.set_size(6,5, true); D =
[[-0.4338-0.2881i 1.3078+0.6448i 0.2890+0.3665i 0.1669+0.1394i 0.0000+0.0000i]
 [0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i 0.0000+0.0000i]
 [-0.4972+0.3697i 0.2482-0.1109i -0.5533+0.0174i 0.2146-0.6056i 0.0000+0.0000i]
 [0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i]
 [0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i]
 [0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i 0.0000+0.0000i]]
D.set_size(3,2, true); D =
[[-0.4338-0.2881i 1.3078+0.6448i]
 [0.4343-0.3287i -0.6401-0.4675i]
 [-0.4972+0.3697i 0.2482-0.1109i]]
D.zeros(); D =
[[0.0000+0.0000i 0.0000+0.0000i]
 [0.0000+0.0000i 0.0000+0.0000i]
 [0.0000+0.0000i 0.0000+0.0000i]]
D.ones(); D =
[[1.0000+0.0000i 1.0000+0.0000i]
 [1.0000+0.0000i 1.0000+0.0000i]
 [1.0000+0.0000i 1.0000+0.0000i]]
D = A; D =
[[-0.4338-0.2881i 1.3078+0.6448i 0.2890+0.3665i 0.1669+0.1394i]
 [0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i]
 [-0.4972+0.3697i 0.2482-0.1109i -0.5533+0.0174i 0.2146-0.6056i]]
D(2,2) = c; D =
[[-0.4338-0.2881i 1.3078+0.6448i 0.2890+0.3665i 0.1669+0.1394i]
 [0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i]
 [-0.4972+0.3697i 0.2482-0.1109i 0.1265-0.1893i 0.2146-0.6056i]]
D(7) = c; D =
[[-0.4338-0.2881i 1.3078+0.6448i 0.2890+0.3665i 0.1265-0.1893i]
 [0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i]
 [-0.4972+0.3697i 0.2482-0.1109i 0.1265-0.1893i 0.2146-0.6056i]]
D.set(0,1, c); D =
[[-0.4338-0.2881i 0.1265-0.1893i 0.2890+0.3665i 0.1265-0.1893i]
 [0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i]
 [-0.4972+0.3697i 0.2482-0.1109i 0.1265-0.1893i 0.2146-0.6056i]]
D.set_row(1, v); D =
[[-0.4338-0.2881i 0.1265-0.1893i 0.2890+0.3665i 0.1265-0.1893i]
 [0.3357+0.7476i 0.1581+0.5101i 1.0024-0.2294i 0.0881-0.5844i]
 [-0.4972+0.3697i 0.2482-0.1109i 0.1265-0.1893i 0.2146-0.6056i]]
D.set_col(2, u): D =
[[-0.4338-0.2881i 0.1265-0.1893i -0.3737+0.4055i 0.1265-0.1893i]
 [0.3357+0.7476i 0.1581+0.5101i 0.3010+0.5067i 0.0881-0.5844i]
 [-0.4972+0.3697i 0.2482-0.1109i 0.9604+0.9759i 0.2146-0.6056i]]
D.set_rows(0, B.get_rows(1,2)); D =
[[-0.0358+0.7264i -0.3674+0.6897i 0.4752+0.1366i 0.5401-0.2073i]
 [0.0142-1.1533i 0.8268-0.5409i -0.3031+0.8992i -0.6724-0.3295i]
 [-0.4972+0.3697i 0.2482-0.1109i 0.9604+0.9759i 0.2146-0.6056i]]
D.set_cols(2, B.get_cols(0,1)); D =
[[-0.0358+0.7264i -0.3674+0.6897i 0.5440-0.6395i 0.8781-0.4015i]
 [0.0142-1.1533i 0.8268-0.5409i -0.0358+0.7264i -0.3674+0.6897i]
 [-0.4972+0.3697i 0.2482-0.1109i 0.0142-1.1533i 0.8268-0.5409i]]
D.copy_row(1, 2); D =
[[-0.0358+0.7264i -0.3674+0.6897i 0.5440-0.6395i 0.8781-0.4015i]
 [-0.4972+0.3697i 0.2482-0.1109i 0.0142-1.1533i 0.8268-0.5409i]
 [-0.4972+0.3697i 0.2482-0.1109i 0.0142-1.1533i 0.8268-0.5409i]]
D.copy_col(2, 3); D =
[[-0.0358+0.7264i -0.3674+0.6897i 0.8781-0.4015i 0.8781-0.4015i]
 [-0.4972+0.3697i 0.2482-0.1109i 0.8268-0.5409i 0.8268-0.5409i]
 [-0.4972+0.3697i 0.2482-0.1109i 0.8268-0.5409i 0.8268-0.5409i]]
D.swap_rows(0, 2); D =
[[-0.4972+0.3697i 0.2482-0.1109i 0.8268-0.5409i 0.8268-0.5409i]
 [-0.4972+0.3697i 0.2482-0.1109i 0.8268-0.5409i 0.8268-0.5409i]
 [-0.0358+0.7264i -0.3674+0.6897i 0.8781-0.4015i 0.8781-0.4015i]]
D.swap_cols(0, 3); D =
[[0.8268-0.5409i 0.2482-0.1109i 0.8268-0.5409i -0.4972+0.3697i]
 [0.8268-0.5409i 0.2482-0.1109i 0.8268-0.5409i -0.4972+0.3697i]
 [0.8781-0.4015i -0.3674+0.6897i 0.8781-0.4015i -0.0358+0.7264i]]
D.set_submatrix(1,2, A(0,1,0,1); D =
[[0.8268-0.5409i 0.2482-0.1109i 0.8268-0.5409i -0.4972+0.3697i]
 [0.8268-0.5409i 0.2482-0.1109i -0.4338-0.2881i 1.3078+0.6448i]
 [0.8781-0.4015i -0.3674+0.6897i 0.4343-0.3287i -0.6401-0.4675i]]
D.set_submatrix(0,0, A(0,1,0,1); D =
[[-0.4338-0.2881i 1.3078+0.6448i 0.8268-0.5409i -0.4972+0.3697i]
 [0.4343-0.3287i -0.6401-0.4675i -0.4338-0.2881i 1.3078+0.6448i]
 [0.8781-0.4015i -0.3674+0.6897i 0.4343-0.3287i -0.6401-0.4675i]]
D.set_submatrix(1,2,2,3, c); D =
[[-0.4338-0.2881i 1.3078+0.6448i 0.8268-0.5409i -0.4972+0.3697i]
 [0.4343-0.3287i -0.6401-0.4675i 0.1265-0.1893i 0.1265-0.1893i]
 [0.8781-0.4015i -0.3674+0.6897i 0.1265-0.1893i 0.1265-0.1893i]]

A.T() =
[[-0.4338-0.2881i 0.4343-0.3287i -0.4972+0.3697i]
 [1.3078+0.6448i -0.6401-0.4675i 0.2482-0.1109i]
 [0.2890+0.3665i 0.8402+0.3585i -0.5533+0.0174i]
 [0.1669+0.1394i -0.3050+1.6777i 0.2146-0.6056i]]
A.T().T() =
[[-0.4338-0.2881i 1.3078+0.6448i 0.2890+0.3665i 0.1669+0.1394i]
 [0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i]
 [-0.4972+0.3697i 0.2482-0.1109i -0.5533+0.0174i 0.2146-0.6056i]]
A.H() =
[[-0.4338+0.2881i 0.4343+0.3287i -0.4972-0.3697i]
 [1.3078-0.6448i -0.6401+0.4675i 0.2482+0.1109i]
 [0.2890-0.3665i 0.8402-0.3585i -0.5533-0.0174i]
 [0.1669-0.1394i -0.3050-1.6777i 0.2146+0.6056i]]

D = concat_horizontal(A,B); D =
[[-0.4338-0.2881i 1.3078+0.6448i 0.2890+0.3665i 0.1669+0.1394i 0.5440-0.6395i 0.8781-0.4015i 0.0172-0.3043i -0.0309-0.1823i]
 [0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i -0.0358+0.7264i -0.3674+0.6897i 0.4752+0.1366i 0.5401-0.2073i]
 [-0.4972+0.3697i 0.2482-0.1109i -0.5533+0.0174i 0.2146-0.6056i 0.0142-1.1533i 0.8268-0.5409i -0.3031+0.8992i -0.6724-0.3295i]]
D = concat_vertical(A,B); D =
[[-0.4338-0.2881i 1.3078+0.6448i 0.2890+0.3665i 0.1669+0.1394i]
 [0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i]
 [-0.4972+0.3697i 0.2482-0.1109i -0.5533+0.0174i 0.2146-0.6056i]
 [0.5440-0.6395i 0.8781-0.4015i 0.0172-0.3043i -0.0309-0.1823i]
 [-0.0358+0.7264i -0.3674+0.6897i 0.4752+0.1366i 0.5401-0.2073i]
 [0.0142-1.1533i 0.8268-0.5409i -0.3031+0.8992i -0.6724-0.3295i]]

D.del_row(2); D =
[[-0.4338-0.2881i 1.3078+0.6448i 0.2890+0.3665i 0.1669+0.1394i]
 [0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i]
 [0.5440-0.6395i 0.8781-0.4015i 0.0172-0.3043i -0.0309-0.1823i]
 [-0.0358+0.7264i -0.3674+0.6897i 0.4752+0.1366i 0.5401-0.2073i]
 [0.0142-1.1533i 0.8268-0.5409i -0.3031+0.8992i -0.6724-0.3295i]]
D.del_rows(0,2); D =
[[-0.0358+0.7264i -0.3674+0.6897i 0.4752+0.1366i 0.5401-0.2073i]
 [0.0142-1.1533i 0.8268-0.5409i -0.3031+0.8992i -0.6724-0.3295i]]
D.del_col(3); D =
[[-0.0358+0.7264i -0.3674+0.6897i 0.4752+0.1366i]
 [0.0142-1.1533i 0.8268-0.5409i -0.3031+0.8992i]]
D.del_cols(0,1); D =
[[0.4752+0.1366i]
 [-0.3031+0.8992i]]

A.ins_row(1, v); A =
[[-0.4338-0.2881i 1.3078+0.6448i 0.2890+0.3665i 0.1669+0.1394i]
 [0.3357+0.7476i 0.1581+0.5101i 1.0024-0.2294i 0.0881-0.5844i]
 [0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i]
 [-0.4972+0.3697i 0.2482-0.1109i -0.5533+0.0174i 0.2146-0.6056i]]
A.ins_col(0, v); A =
[[0.3357+0.7476i -0.4338-0.2881i 1.3078+0.6448i 0.2890+0.3665i 0.1669+0.1394i]
 [0.1581+0.5101i 0.3357+0.7476i 0.1581+0.5101i 1.0024-0.2294i 0.0881-0.5844i]
 [1.0024-0.2294i 0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i]
 [0.0881-0.5844i -0.4972+0.3697i 0.2482-0.1109i -0.5533+0.0174i 0.2146-0.6056i]]
A.append_col(A2.get_col(3)); A =
[[0.3357+0.7476i -0.4338-0.2881i 1.3078+0.6448i 0.2890+0.3665i 0.1669+0.1394i 0.2890+0.3665i]
 [0.1581+0.5101i 0.3357+0.7476i 0.1581+0.5101i 1.0024-0.2294i 0.0881-0.5844i 1.0024-0.2294i]
 [1.0024-0.2294i 0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i 0.8402+0.3585i]
 [0.0881-0.5844i -0.4972+0.3697i 0.2482-0.1109i -0.5533+0.0174i 0.2146-0.6056i -0.5533+0.0174i]]
A.append_row(A2.get_row(0)); A =
[[0.3357+0.7476i -0.4338-0.2881i 1.3078+0.6448i 0.2890+0.3665i 0.1669+0.1394i 0.2890+0.3665i]
 [0.1581+0.5101i 0.3357+0.7476i 0.1581+0.5101i 1.0024-0.2294i 0.0881-0.5844i 1.0024-0.2294i]
 [1.0024-0.2294i 0.4343-0.3287i -0.6401-0.4675i 0.8402+0.3585i -0.3050+1.6777i 0.8402+0.3585i]
 [0.0881-0.5844i -0.4972+0.3697i 0.2482-0.1109i -0.5533+0.0174i 0.2146-0.6056i -0.5533+0.0174i]
 [0.3357+0.7476i -0.4338-0.2881i 1.3078+0.6448i 0.2890+0.3665i 0.1669+0.1394i 0.2890+0.3665i]]

A+B =
[[0.1102-0.9276i 2.1860+0.2433i 0.3062+0.0622i 0.1360-0.0428i]
 [0.3985+0.3977i -1.0076+0.2222i 1.3154+0.4951i 0.2351+1.4704i]
 [-0.4831-0.7836i 1.0750-0.6518i -0.8564+0.9166i -0.4578-0.9351i]]
A+c =
[[-0.3074-0.4774i 1.4343+0.4555i 0.4155+0.1772i 0.2933-0.0499i]
 [0.5608-0.5180i -0.5137-0.6568i 0.9667+0.1691i -0.1785+1.4884i]
 [-0.3707+0.1804i 0.3747-0.3003i -0.4268-0.1719i 0.3410-0.7949i]]
c+A =
[[-0.3074-0.4774i 1.4343+0.4555i 0.4155+0.1772i 0.2933-0.0499i]
 [0.5608-0.5180i -0.5137-0.6568i 0.9667+0.1691i -0.1785+1.4884i]
 [-0.3707+0.1804i 0.3747-0.3003i -0.4268-0.1719i 0.3410-0.7949i]]
A+=B; A =
[[0.1102-0.9276i 2.1860+0.2433i 0.3062+0.0622i 0.1360-0.0428i]
 [0.3985+0.3977i -1.0076+0.2222i 1.3154+0.4951i 0.2351+1.4704i]
 [-0.4831-0.7836i 1.0750-0.6518i -0.8564+0.9166i -0.4578-0.9351i]]
A+=c; A =
[[-0.3074-0.4774i 1.4343+0.4555i 0.4155+0.1772i 0.2933-0.0499i]
 [0.5608-0.5180i -0.5137-0.6568i 0.9667+0.1691i -0.1785+1.4884i]
 [-0.3707+0.1804i 0.3747-0.3003i -0.4268-0.1719i 0.3410-0.7949i]]

A-B =
[[-0.9779+0.3514i 0.4297+1.0463i 0.2718+0.6708i 0.1978+0.3217i]
 [0.4701-1.0551i -0.2727-1.1572i 0.3650+0.2219i -0.8450+1.8850i]
 [-0.5114+1.5230i -0.5786+0.4300i -0.2502-0.8818i 0.8870-0.2761i]]
A-c =
[[-0.5603-0.0988i 1.1814+0.8342i 0.1625+0.5558i 0.0404+0.3288i]
 [0.3078-0.1394i -0.7666-0.2782i 0.7138+0.5478i -0.4314+1.8671i]
 [-0.6237+0.5590i 0.1217+0.0784i -0.6798+0.2067i 0.0881-0.4163i]]
c-A =
[[0.5603+0.0988i -1.1814-0.8342i -0.1625-0.5558i -0.0404-0.3288i]
 [-0.3078+0.1394i 0.7666+0.2782i -0.7138-0.5478i 0.4314-1.8671i]
 [0.6237-0.5590i -0.1217-0.0784i 0.6798-0.2067i -0.0881+0.4163i]]
A-=B; A =
[[-0.9779+0.3514i 0.4297+1.0463i 0.2718+0.6708i 0.1978+0.3217i]
 [0.4701-1.0551i -0.2727-1.1572i 0.3650+0.2219i -0.8450+1.8850i]
 [-0.5114+1.5230i -0.5786+0.4300i -0.2502-0.8818i 0.8870-0.2761i]]
A-=c; A =
[[-0.5603-0.0988i 1.1814+0.8342i 0.1625+0.5558i 0.0404+0.3288i]
 [0.3078-0.1394i -0.7666-0.2782i 0.7138+0.5478i -0.4314+1.8671i]
 [-0.6237+0.5590i 0.1217+0.0784i -0.6798+0.2067i 0.0881-0.4163i]]
-A =
[[0.4338+0.2881i -1.3078-0.6448i -0.2890-0.3665i -0.1669-0.1394i]
 [-0.4343+0.3287i 0.6401+0.4675i -0.8402-0.3585i 0.3050-1.6777i]
 [0.4972-0.3697i -0.2482+0.1109i 0.5533-0.0174i -0.2146+0.6056i]]

A*C =
[[-2.0084+1.4949i -0.3361+0.8159i 1.2262-0.0879i]
 [2.8940-1.4041i -0.2298+2.5314i 0.1093-3.0242i]
 [-1.3085+1.4105i 0.2880-1.1105i 0.2800+0.5947i]]
A*=C; A =
[[-2.0084+1.4949i -0.3361+0.8159i 1.2262-0.0879i]
 [2.8940-1.4041i -0.2298+2.5314i 0.1093-3.0242i]
 [-1.3085+1.4105i 0.2880-1.1105i 0.2800+0.5947i]]
A*c =
[[-0.1094+0.0457i 0.2875-0.1661i 0.1059-0.0084i 0.0475-0.0140i]
 [-0.0073-0.1238i -0.1695+0.0621i 0.1741-0.1137i 0.2791+0.2699i]
 [0.0071+0.1409i 0.0104-0.0610i -0.0667+0.1069i -0.0875-0.1172i]]
c*A =
[[-0.1094+0.0457i 0.2875-0.1661i 0.1059-0.0084i 0.0475-0.0140i]
 [-0.0073-0.1238i -0.1695+0.0621i 0.1741-0.1137i 0.2791+0.2699i]
 [0.0071+0.1409i 0.0104-0.0610i -0.0667+0.1069i -0.0875-0.1172i]]
A*=c; A =
[[-0.1094+0.0457i 0.2875-0.1661i 0.1059-0.0084i 0.0475-0.0140i]
 [-0.0073-0.1238i -0.1695+0.0621i 0.1741-0.1137i 0.2791+0.2699i]
 [0.0071+0.1409i 0.0104-0.0610i -0.0667+0.1069i -0.0875-0.1172i]]
A*v = [0.4175+0.5639i 2.4069+0.3066i -1.2331-0.1729i]
elem_mult(A,B) =
[[-0.4203+0.1207i 1.4074+0.0412i 0.1165-0.0817i 0.0203-0.0347i]
 [0.2232+0.3272i 0.5576-0.2697i 0.3503+0.2851i 0.1831+0.9693i]
 [0.4193+0.5786i 0.1452-0.2260i 0.1521-0.5028i -0.3438+0.3365i]]
elem_mult_out(A,B,out); out =
[[-0.4203+0.1207i 1.4074+0.0412i 0.1165-0.0817i 0.0203-0.0347i]
 [0.2232+0.3272i 0.5576-0.2697i 0.3503+0.2851i 0.1831+0.9693i]
 [0.4193+0.5786i 0.1452-0.2260i 0.1521-0.5028i -0.3438+0.3365i]]
elem_mult_inplace(A,B); B =
[[-0.4203+0.1207i 1.4074+0.0412i 0.1165-0.0817i 0.0203-0.0347i]
 [0.2232+0.3272i 0.5576-0.2697i 0.3503+0.2851i 0.1831+0.9693i]
 [0.4193+0.5786i 0.1452-0.2260i 0.1521-0.5028i -0.3438+0.3365i]]
elem_mult_sum(A,B) = 2.8108+1.5439i

A/c =
[[-0.0063-2.2873i 0.8357+6.3496i -0.6334+1.9497i -0.1021+0.9496i]
 [2.2600+0.7841i 0.1456-3.4784i 0.7407+3.9432i -6.8713+2.9794i]
 [-2.5632-0.9139i 1.0107+0.6359i -1.4133-1.9783i 2.7352-0.6939i]]
A/=c; A =
[[-0.0063-2.2873i 0.8357+6.3496i -0.6334+1.9497i -0.1021+0.9496i]
 [2.2600+0.7841i 0.1456-3.4784i 0.7407+3.9432i -6.8713+2.9794i]
 [-2.5632-0.9139i 1.0107+0.6359i -1.4133-1.9783i 2.7352-0.6939i]]
A/=B; A =
[[-0.0735-0.6159i 0.9541+1.1706i -1.1470+1.0145i -0.8944+0.7639i]
 [-0.4808-0.5742i -0.1428+1.0043i 1.8335+0.2273i -1.5315+2.5188i]
 [-0.3258-0.4271i 0.2717+0.0436i 0.2036+0.5467i 0.0986+0.8523i]]
elem_div(A,B) =
[[-0.0735-0.6159i 0.9541+1.1706i -1.1470+1.0145i -0.8944+0.7639i]
 [-0.4808-0.5742i -0.1428+1.0043i 1.8335+0.2273i -1.5315+2.5188i]
 [-0.3258-0.4271i 0.2717+0.0436i 0.2036+0.5467i 0.0986+0.8523i]]
elem_div_out(A,B,out); out =
[[-0.0735-0.6159i 0.9541+1.1706i -1.1470+1.0145i -0.8944+0.7639i]
 [-0.4808-0.5742i -0.1428+1.0043i 1.8335+0.2273i -1.5315+2.5188i]
 [-0.3258-0.4271i 0.2717+0.0436i 0.2036+0.5467i 0.0986+0.8523i]]
elem_div_sum(A,B) = -1.2342+6.5246i

========================================
   Testing initialisation with string
========================================
bmat M = " 1 1 0; 0 1; 1 1 ,1,   1; ; 0 1"
M =
[[1 1 0 0]
 [0 1 0 0]
 [1 1 1 1]
 [0 0 0 0]
 [0 1 0 0]]
smat M = "0xFF, -021 ,   100; 0,-0x01; 0xA, 10 012;  "
M =
[[255 -17 100]
 [0 -1 0]
 [10 10 10]]
imat M = "0xFAC0, -021, 100000; 0,-0x01; 0xA, 10 012; "
M =
[[64192 -17 100000]
 [0 -1 0]
 [10 10 10]]
mat M = ".77 1e9 35; 0x7 3.5 -1000 "M =
[[0.7700 189000.0000 35.0000]
 [7.0000 3.5000 -1000.0000]]
cmat M = " 1.5+3i, (.33,1) ;  (333,-1) 2-0.2E-3i"
M =
[[1.5000+3.0000i 0.3300+1.0000i]
 [333.0000-1.0000i 2.0000-0.0002i]]

