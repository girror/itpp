===============================================================================
IT++ version 3.99.1                                        Released: 2007-03-22
-------------------------------------------------------------------------------

This is the next development release of the IT++ 3.99.x series. Below is a
brief summary of the most important new features, modifications and bug
fixes, as compared to the previous release 3.99.0. Please note that some
interfaces have changed, so you might need to update your programs linking
to this version.


New features:
-------------

* Random number generator extended with random53_01_lclosed() function,
  which generates [0,1) values in 53-bit resolution.

* Added missing	read/write operators for char variables in it_file and
  it_ifile classes

* MS Visual C++ .NET project file for linking IT++ with ACML added


Modifications:
--------------

* LDPC_Parity_Matrix and LDPC_Generator_Matrix classes split into a set of
  specialized classes, which inherits from the base classes LDPC_Parity and
  LDPC_Generator. The new inheritance model provides a flexible interface
  for creating new generation methods and parity check matrix
  representations by end users.

* Portability improved by replacing "unsigned short int" with 8-bit
  "unsigned char" type for storing data bits in GF2mat

* Improved the speed and portability of external libraries detection macros


Bug-fixes:
---------

* Fixed bug [1661419] by adding default constructors to the QAM, PSK, PAM_c
  and PAM modulator classes. Thanks to Jordy Potman for reporting this bug.

* Fixed a bug in BLAS detection, when an explicit library is passed to the
  script configure using "--with-blas=" option.


===============================================================================
IT++ version 3.99.0                                        Released: 2007-01-21
-------------------------------------------------------------------------------

This is the first release of the IT++ 3.99.x development series, which is
based on sources from the main SVN branch (trunk). After some period of
stabilization, a new stable release will be created from this branch (IT++
4.0.0). Since this is a development branch, some interfaces might be changed
in future releases. Moreover, some interfaces have changed with respect to
the stable 3.10.x series.

Below is a brief summary of the most important new features, modifications
and bug fixes, as compared to the recent stable 3.10.x releases. All minor
modifications and bug-fixes from 3.10.x series are included in this release
as well.


New features:
-------------

* New functions for initializing vectors and matrices from strings
  implemented. Main features of the improved parser are as follows:
  - Decimal, octal and hexadecimal notation support according to C/C++
    conventions, i.e. octal numbers starts with `0' (e.g. `0133', `077'),
    decimal numbers starts with `1-9' or are single `0' digits, hexadecimal
    numbers starts with `0x' or `0X' prefix and have at least one `0-9',
    `a-f' or `A-F' digit after (e.g. 0xFF, 0x0, 0x070).
  - Mixing of various representations in one string
  - Signed numbers supported, i.e. with leading `+', `-' signs, e.g.
    `-1000', `+0133', `-0x1'
  - Vector values separated with spaces ` ', tabs `\t' or comma `,'
  - Matlab's "a:b" or "a:b:c" notation for increasing and decreasing
    values, e.g. "0:2:10", "-9:-18", "4:-1:0", "0x0:0x8:0xFF"
  - Matrix rows separated with a single semicolon `;'
  - Detection of syntax errors during parsing

* New features of the communication channels:
  - Implemented missing "Gauss I" and "Gauss II" Doppler spectra required by
    a few COST207 channel models
  - Channel_Specification and TDL_Channel classes extended with support of
    LOS (Rice) fading for any tap. Removed Doppler spectrum of type `Rice',
    since its generation method was the same as of the `Jakes' one. To
    obtain the `Rice' spectrum, a relative power, and optionally relative
    Doppler, needs to be defined for certain taps.
  - Implemented exponential channel profile generation function

* Created a new set of Mixture of Gaussians (MOG) classes written by Conrad
  Sanderson (Statistics module)

* Added templated Histogram class provided by Andy Panov (feature request
  [1451288])

* Added new classes for Low-Density Parity Check (LDPC) codes

* Added support for MacKay's "alist" representation of sparse GF(2)
  matrices

* Systematic codewords support in BCH and RS encoder/decoder classes
  contributed by Steve Peters (feature request [1418250])

* New methods in Vec and Mat classes: elem_mult_inplace(), elem_mult_out(),
  elem_div_out(), elem_mult_sum(), elem_div_sum() and sumsum()

* Added missing left(), right() and mid() methods to the Array class


Modifications:
--------------

* New "Signal Processing", "Statistics" and "Numerical Optimization" modules
  created from a subset of classes and functions from the "Base" module

* Modularization added to the configuration scripts. It is now possible to
  select a limited set of modules, which will be built and installed as the
  IT++ library.

* Restructuring of the source files in the "Base" module. Some of the
  functions grouped in "Linear Algebra" and "Mathematical and Miscellaneous
  Functions" sub-modules.

* Major redesign of 1D and 2D modulator classes. From now, there is only one
  templated base class Modulator, which can handle 1D (real) and 2D
  (complex) constellations. Other modulators inherits from this base class.
  BPSK and PAM modulators are split into: BPSK_c/PAM_c classes which have
  complex-valued interfaces, and BPSK/PAM that have real-valued interfaces.
  Besides, demodulate_soft_bits() functions take an additional parameter
  "method" to switch between Log-MAP or approximate demodulation. The input
  signal for the Modulator_2D has now a slightly different meaning. Also an
  improper definition of the QPSK constellation is fixed (it was a 4-QAM
  modulator previously).

* Important updates in the communication channels:
  - Fading generators inheritance model redesigned. Now there are three
    types of fading: Independent, Static and Correlated. The Correlated
    fading can be generated using Rice (MEDS), FIR or IFFT methods. The
    default fading type is set to `Independent'.
  - The delay profile discretization function is improved and moved to the
    TDL_Channel class. An additional parameter `sampling_time' is required
    when setting the channel profile using the Channel_Specification object.
    It is now possible to discretize the channel with too low sampling
    frequency, but only if the taps being merged into a new single tap use
    the same Doppler spectrum type.
  - Cleaned up the interfaces of various fading generator classes

* Improved the consistency of the alloc(), free() and set_size() methods in
  the Array, Mat and Vec classes

* Error functions it_assert(), it_warning() and it_error() extended to
  handle stream operators like `<<' or `std::endl' in concatenation with
  strings, e.g. `it_error("Wrong value x = " << oct << x)' (feature request
  [1569867] by George Jongren)

* Changed the method of detecting the endianness of a system -
  "itpp/base/machdep.h" is no longer used.


Bug-fixes:
---------

* Fixed a bug that resulted in different output samples of the IFFT fading
  generator on SPARC Solaris 9 using GCC 3.4.5, than the ones obtained in
  other environments. The problem was caused by a different order of
  calculating the random arguments of the concat() function. This is either
  a bug of GCC for Solaris or its dependence on different endianness, or it
  is not fully specified behavior of C/C++ standards.

* Several other bug-fixes and improvements. For a full list of them, see the
  ChangeLog and NEWS-3.10 files.
