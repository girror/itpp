===============================================================================
IT++ version 3.99.0                                        Released: 2007-01-??
-------------------------------------------------------------------------------

This is the first IT++ release of 3.99.x development series, which is based
on sources from the main SVN branch (trunk). After some period of
stabilisation, a new stable set of releases (starting from version 4.0.0)
will be created from this branch. Since, this is a development branch, some
interfaces might be changed in future releases. Moreover, some interfaces
changed with respect to the stable 3.10 branch.

Below is a brief summary of the most important new features, modifications
and bug fixes, as compared to the recent stable 3.10.x releases. All minor
modifications and bug-fixes from 3.10 series are included in this release as
well.


New features:
-------------

* New functions for initialising vectors and matrices from strings
  implemented. Main features of the improved parser are as follows:
  - Decimal, octal and hexadecimal notation support according to C/C++
    conventions, i.e. octal number starts with `0' (e.g. `0133', `077'),
    decimal number starts with `1-9' or is a single `0' digit, hexadecimal
    number starts with `0x' or `0X' prefix and has at least one `0-9',
    `a-f'or `A-F' digit after (e.g. 0xFF, 0x0, 0x070). Various
    representations can be mixed in one string.
  - Signed numbers supported, i.e. with `+', `-' or nothing in front, e.g.
    `-1000', `+0133', `-0x1'
  - Vector values can be separated with spaces ` ', tabs `\t' or comma `,',
    e.g. " -1 22, 47 0x5, 077"
  - Matlab's "a:b" or "a:b:c" notation for both increasing and decreasing
    values supported, e.g. "0:2:10", "-9:-18", "4:-1:0", "0x0:0x8:0xFF"
  - Matrix rows separated with a single semicolon `;'
  - Detection of syntax errors during parsing

* BCH and RS code related patches from feature request [1418250] applied.
  Now, BCH and RS encoder/decoder can be set to produce codewords in a
  systematic order. Thanks to Steve Peters for providing the patches and
  test files.

* New features of the communication channels:
  - Implemented missing "Gauss I" and "Gauss II" Doppler spectra required by
    a few COST207 channel models. These Gaussian spectra are only available
    in the Rice_Fading_Generator class.
  - Channel_Specification and TDL_Channel classes extended with support of
    LOS (Rice) fading for any tap. Removed Doppler spectrum of type `Rice',
    since its generation method was the same as of `Jakes' or `Classic'
    ones. To obtain `Rice' spectrum relative power and optionally
    relative Doppler needs to be defined for certain taps (relative Doppler
    is set to 0.7 by default).
  - Implemented exponential channel profile generation function.

* Created a new set of Mixture of Gaussians (MOG) classes written by Conrad
  Sanderson (Statistics module).

* Added templated Histogram class provided by Andy Panov (feature request
  [1451288]).

* Implemented feature request [1569867] using a patch submitted by George
  Jongren. Now, it_assert(), it_warning() and it_error() functions can use
  stream operators like `<<' or `std::endl' in concatenation with strings,
  e.g. `it_error("Wrong value x = " << oct << x)'.

* New log_add() function implemented, which calculates safely the following
  expression: log(exp(log_a) + exp(log_b)). Thanks to Conrad Sanderson for
  his patches.

* Added sumsum() function, which is a fast version of sum(sum(A)) (i.e.
  calculates the total of all elements in a matrix).

* Added elem_mult_inplace(), elem_mult_out(), elem_div_out(),
  elem_mult_sum() and elem_div_sum(). Descriptions: elem_mult_inplace() is a
  fast version of "B = elem_mult(A,B)". elem_mult_out() and elem_div_out():
  element-wise multiplication and division of matrices, respectively, with
  the result stored in a matrix given as an argument. elem_mult_sum() and
  elem_div_sum(): element-wise multiplication and division of matrices,
  followed by summation of the resultant elements.

* Added missing left(), right() and mid() methods to the Array class.

* Added support for MacKay's "alist" representation of sparse GF(2)
  matrices.

* Added first versions of the Low-Density Parity Check (LDPC) codes classes.


Modifications:
--------------

* New "Signal Processing", "Statistics" and "Numerical Optimization" modules
  created from a subset of classes and functions from the "Base" module.

* Modularisation added to the configuration scripts. It is now possible to
  select a limited set of modules, which will be build and installed as the
  IT++ library.

* Restructure of the source files in the "Base" module. Some of the
  functions grouped in "Linear Algebra" and "Mathematical and Miscellaneous
  Functions" sub-modules.

* Major redesign of 1D and 2D modulator classes. From now, there is only one
  templated base class Modulator, which can handle 1D (real) and 2D
  (complex) constellations. BPSK and PAM modulators are split into:
  BPSK_c/PAM_c classes which have complex-valued interfaces but only real
  part of the signal is used, and BPSK/PAM classes that have real valued
  interface. Besides, demodulate_soft_bits() functions use additional
  parameter "method" to switch between Log-MAP or approximate demodulation
  algorithm. QAM, PSK and PAM modulators inherits from the templated
  Modulator base class. Moreover, QPSK and BPSK_c inherits from the PSK
  class. Please note that input signal for Modulator_2D has now slightly
  different meaning. BTW, improper definition of QPSK constellation is fixed
  (it was a 4-QAM modulator previously).

* Important updates in the communication channels:
  - Fading generators inheritance model redesigned. Now there are three
    types of fading: Independent, Static and Correlated. The Correlated
    fading can be generated using Rice (MEDS), FIR or IFFT methods. When
    `fading_type' is equal to `Correlated', non-zero normalised Doppler
    needs to be specified. The default fading type is set to `Independent'.
  - The channel discretization function improved and moved to the
    TDL_Channel class. An additional parameter `sampling_time' is required
    when setting the channel profile using the Channel_Specification object.
    Added additional assertion checks for undersampled cases during channel
    discretization. It is now possible to discretize the channel with too
    low sampling frequency, but only if the taps being merged into a new
    single tap use the same Doppler spectrum type.
  - Cleaned up the interface of various fading generator classes: (+)
    implemented add_LOS() function in the base class, which is reused by the
    child classes; (+) global jake_filter() function moved into
    FIR_Fading_Generator class; (+) all get_*() functions changed to the
    const ones; (+) base class `init_flag' is now set in the initialisation
    list of the constructor.

* Changed the method of detecting the endianness of a system -
  "itpp/base/machdep.h" is not used any more.

* Improved the consistency of alloc(), free() and set_size() methods in
  Array, Mat and Vec classes. Cosmetic changes related to the separation of
  class interfaces from their implementation in these base classes.


Bug-fixes:
---------

* Fixed a bug that resulted in different output samples of the IFFT fading
  generator on SPARC Solaris using GCC 3.4.5, than the ones obtained in
  other environments. The problem was probably caused by a different order of
  calculating the random arguments of the concat() function. Do not know if
  this is a bug of GCC for Solaris, or it is not fully specified behaviour
  in C/C++ standards.

* A lot of other bug-fixes. For a full list of them, please check the
  ChangeLog file.
