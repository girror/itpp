2008-02-21  Adam Piatyszek  <ediap@users.sourceforge.net>

	* itpp/base/vec.h: Minor documentation fixes to prevent warnings
	of the Doxygen

2008-02-20  Adam Piatyszek  <ediap@users.sourceforge.net>

	* INSTALL, doc/local/installation.doc, itpp/base/blas.h,
	itpp/base/vec.cpp, itpp/base/vec.h, itpp/config_msvc.h,
	m4/acx_blas.m4: Removed non-portable "--with-zdotu=complex" method

	It seems that there is no portable solution for calling from C++
	the Fortran functions that returns a complex value. C99 introduces
	"double _Complex" type, which is compatible with Fortran COMPLEX.
	But this C99 type is not a valid C++ type. Therefore this patch
	removes the "complex" method from "--with-zdotu" option. The valid
	methods are now:
	- "zdotusub" - use a zdotusub_ Fortran wrapper function
	- "void" - compatible with BLAS libraries built with g77 compiler
	- "none" - do not use zdotu_ function at all

2008-02-19  Adam Piatyszek  <ediap@users.sourceforge.net>

	* INSTALL, configure.ac.in, doc/local/installation.doc,
	itpp/base/blas.h, itpp/base/vec.cpp, itpp/base/vec.h,
	itpp/config_msvc.h, m4/acx_blas.m4: Add "--with-zdotu" option to
	select zdotu_ calling convention

	The "--with-zdotu=<method>" option can be used to change the
	default calling convention of BLAS zdotu_ Fortran function. The
	BLAS libraries built with g77 compiler do not return the complex
	result of a function, but pass it via the first argument of the
	function. The implementations compiled with gfortran and other
	vendor compilers return complex result as a typical function. By
	using a "void" method with the "--with-zdotu=<method>" option, the
	former approach is used (g77 compatible). To use the zdotu_ call
	that returns the result by value, a "complex" method should be
	passed. Without setting any of the two methods explicitly, IT++
	tries to guess the proper method based on the detected BLAS
	implementation. Otherwise, a Fortran wrapper function zdotusub_ is
	used, which requires a working Fortran compiler. Finally, if this
	is not the case, the zdotu_ BLAS method is not used at all and a
	relevant warning message is displayed during the configuration
	step.

2008-02-18  Adam Piatyszek  <ediap@users.sourceforge.net>

	* autogen.sh: Cosmetic improvements

	Replace back-ticks `...` with POSIX shell syntax $(...). BTW,
	improve generation of a snapshot version string.

	* itpp/base/blas.h, itpp/base/vec.cpp, itpp/base/vec.h,
	itpp/config_msvc.h, m4/acx_blas.m4, m4/ax_func_zdotu.m4: Use
	zdotusub_ Fortran wrapper by default

	This patch removes the run-time checks for correct zdotu_ calling
	conventions, which caused a lot of portability problems in IT++
	4.0.1 and 4.0.2 releases. The preferred method is now to use the
	locally provided zdotusub_ Fortran wrapper (as in 4.0.0 release).
	This requires the availability of a Fortran compiler, unless an
	Intel MKL library is used, in which zdotu_ can be called directly
	from C++ without any problems. If no Fortran compiler is available
	and Intel MKL is not used, the zdotu_ function is not called at
	all. In such case, a relevant warning message is printed during
	the configuration step.

	* configure.ac.in, itpp/base/Makefile.am, itpp/base/sources.mk,
	itpp/base/zdotusub.f, m4/acx_blas.m4: Revert "Removed redundant
	zdotusub_ Fortran wrapper to zdotu_ function"

------------------------------------------------------------------------------

2008-02-15  Adam Piatyszek  <ediap@users.sourceforge.net>

	* VERSION: Updated for SVN snapshot releases

------------------------------------------------------------------------------

2008-02-15  Adam Piatyszek  <ediap@users.sourceforge.net>

	* IT++ 4.0.2 released (SVN tag: release-4-0-2)

	* NEWS, VERSION: Release notes added and version number updated
	for IT++ 4.0.2

	* ChangeLog-2007: Archive ChangeLog entries from year 2007

2008-02-14  Adam Piatyszek  <ediap@users.sourceforge.net>

	* itpp/base/parser.cpp, tests/parser_test.cpp,
	tests/parser_test.ref: Fix wrong verbose output of Parser's get()
	function for int and bool types

	When Parser was used to scan an already defined int or bool
	variable and the parsed variable was not found, the verbose
	output was wrong. Here is a minimum example:

          Parser p(argc, argv);
	  int i = 5;
	  bool b = true;
          p.get(a, "a");
	  p.get(b, "b");

	The wrong output of this program was:

	  i = [];
	  b = ;

	instead of:

	  i = 5;
	  b = 1;

	This patch fixes this problem and also improves the parser_test
	program, to detect such issues in future. Thanks to Jia-Yin for
	reporting this problem.

	* itpp/comm/convcode.h: Documentation improvements related to
	encoder state.

	This patch improves the documentation of the encoding and decoding
	functions. Especially, it clarifies why set_start_state() and
	init_encoder() methods have no effect on encode_tail() and
	encode_tailbite() functions.

	* itpp/comm/modulator.h: Improve the documentation of
	Modulator::get_bits2symbols() function

2008-01-31  Adam Piatyszek  <ediap@users.sourceforge.net>

	* itpp/base/gf2mat.cpp: Fix GF2mat_sparse_alist::from_sparse()
	conversion function

	The conversion function from GF2mat_sparse format to "alist" text
	file format could incorrectly create the "mlist" and "nlist"
	matrices with indexes of non-zero entries. This patch fixes this
	bug and also improves the conversion speed by using the
	get_nz_indices() function from Sparse_Vec class and set_row()
	instead of append_row() where possible.

2008-01-23  Adam Piatyszek  <ediap@users.sourceforge.net>

	* Makefile.am, VERSION, autogen.sh: Optionally append SVN revision
	to IT++ package version

	When bootstrapping IT++ sources from SVN or Git repositories
	append the SVN revision number to the package version string. This
	feature is triggered by including the additional "svn" keyword in
	at the end of the first line of the VERSION file.

	BTW, remove snapshot and snapshot-html top Makefile's targets.

2008-01-17  Adam Piatyszek  <ediap@users.sourceforge.net>

	* configure.ac.in, itpp/Makefile.am: Fix improper default shared
	and static settings

	Besides, do not add "-no-undefined" libtool switch to global
	LDFLAGS. Use NO_UNDEFINED substituted variable instead.

2008-01-06  Adam Piatyszek  <ediap@users.sourceforge.net>

	* itpp/base/math/log_exp.h: Fix bug [1863940] in log_add()
	function for infinite arguments

	When both arguments of log_add() function were either inf or -inf,
	the result was NaN instead of +/-inf. This patch fixes this issue.

2008-01-04  Adam Piatyszek  <ediap@users.sourceforge.net>

	* itpp/base/math/misc.h: Add missing itpp namespace description

	Without this patch, Doxygen 1.5.4 did not generate any
	documentation for the itpp namespace.

2008-01-01  Adam Piatyszek  <ediap@users.sourceforge.net>

	* configure.ac.in, extras/*.m, itpp-config.1.in, itpp/**/*.h,
	itpp/**/*.cpp, tests/*.cpp: Copyright dates updated to `1995-2008'

	* configure.ac.in: Add support for building a DLL library on
	Cygwin

	When libblas and liblapack are installed from Cygwin repository,
	it is possible to build IT++ as a DLL library. This requires
	"-no-undefined" flag to be passed to the linker.
