IT++ Installation
*****************

IT++ Requirements
=================

IT++ should compile without errors or warnings on most GNU/Linux systems
and on most other UNIX like systems like Solaris, Mac OS X, or Cygwin. It
also compiles on Windows NT/2000/XP using Microsoft's Visual C++ .NET
2003 (MSVC++). For Linux, Unix, Cygwin and Mac OS X systems we assume
that you have at least the following GNU software installed on your
computer: 

  - GNU make, version 3.72.1 or later (to check version run `make
    --version')

  - GCC - GNU Compilers Collection (gcc, g++ and g77), version 3.3.x or
    later (to check version run `gcc --version')

Optionally, you might need additional tools like: Doxygen, LaTeX, Dvips
and Ghostscript to generate the HTML documentation.

We strongly recommend that you use the recent stable releases of the
GCC, i.e. 4.0.2, 3.4.5 or 3.3.6, if possible. We do not actively work 
on supporting older compilers and they may therefore (without prior
notice) become unsupported in future versions of IT++.

In order to use all functionality provided in the IT++ library it is
recommended that you have some external libraries compiled and installed
on your computer. The most important are FFTW, BLAS and LAPACK. To improve
some vector based operations CBLAS is also recommened. BLAS and CBLAS are
included in ATLAS (Automatically Tuned Linear Algebra Software), which is a
recommended choice. Optionally, binary version of Intel Math Kernel Library
might be used as a replacement of all of these. It is possible to compile
and use IT++ without these libraries, but the functionality will be reduced.
We therefore recommend that you take some time and effort to provide these
external libraries in your system. Please note, that some of them (FFTW,
BLAS and LAPACK) are usually included in the most modern Linux
distributions.


IT++ Configuration, Compilation and Installation
================================================

Since version 3.9.0, the IT++ library uses Autoconf/Automake tools for
configuration and Makefiles creation, so the compilation procedure
resembles a standard, well-known GNU method, i.e. 

  % ./configure
  % make

The `configure' command can be invoked with additional switches and
options (run `./configure --help' to get a list of them). The most
important are:

`--prefix=PREFIX'
    Set top installation directory to a certain PREFIX value. By default
    it is set to `/usr/local', so `make install' will install the
    package's files into `/usr/local/include', `/usr/local/lib`, etc.

`--enable-debug'
    Switch to DEBUG mode by setting additional debugging flags used by
    compiler and linker (disabled by default) 

`--enable-exceptions'
    Enable exceptions handling of run-time errors instead of aborting 
    the program (disabled by default) 

`--enable-html-doc'
    Do not generate and install HTML documentation (enabled by default) 

`--with-march=CPU'
    Enable optimization for a specific CPU: i686, pentium3, pentium4,
    prescott, athlon-tbird, athlon-xp, athlon-mp, etc. This option is
    only used by GCC. See `man gcc' for more details.

`--disable-shared' 
    Prevent building the shared library (enabled by default)

`--disable-static' 
    Prevent building the static library (enabled by default)

By default, the `configure' script checks for a few external libraries
used by the IT++ library. These are: FFTW, BLAS, CBLAS and LAPACK. If
these libraries are found in your system, appropriate flags (i.e.
HAVE_FFTW, HAVE_BLAS, HAVE_CBLAS and HAVE_LAPACK) will be defined, and used
during the compilation and linking process.

If some of the external libraries are installed in a non-standard location 
in your system, so they can not be detected by the `configure' script
automatically, you might use `LDFLAGS' environment variable to define
additional directories to be searched, e.g.:

  % export LDFLAGS="-L/home/user/lib" 

Besides, if the external libraries have non-standard names, you might
specify them to the configure using `--with-<LIBNAME>' switches, where 
<LIBNAME> is one of the following: `fftw', `blas', `cblas' or `lapack'. 
For example:

`--with-fftw=-lfftw3' or `--with-fftw=fftw3' will extend the default 
    LIBS variable with `-lfftw3'  

Please run `./configure --help' to obtain a full list of `--with-<LIBNAME>'
switches available.

Although it is not recommended, you can intentionally prevent detection of
some external libraries. To do this, you should use `--without-<LIBNAME>'
or `--with-<LIBNAME>=no', e.g.:

  % ./configure --without-cblas --without-lapack

When the configuration process is finished a status message is briefly
presented. For instance, after having invoked the following configuration
command:

  % ./configure --with-march=pentium3

one can observe something like that:

------------------------------------------------------------------------------
itpp-3.9.1 library configuration:
------------------------------------------------------------------------------

Directories:
  - prefix ....... : /usr/local
  - exec_prefix .. : ${prefix}
  - includedir ... : ${prefix}/include
  - libdir ....... : ${exec_prefix}/lib
  - docdir ....... : ${prefix}/share/doc/itpp-3.9.1

Switches:
  - debug ........ : no
  - exceptions ... : no
  - html-doc ..... : yes
  - shared ....... : yes
  - static ....... : yes

Documentation tools:
  - Doxygen ...... : yes
  - LaTeX ........ : yes
  - Dvips ........ : yes
  - GhostScript .. : yes

Testing tools:
  - Diff ......... : yes

External libs:
  - MKL .......... : no
  - FFTW ......... : yes
  - BLAS ......... : yes
  - CBLAS ........ : yes
  - LAPACK ....... : yes

Compiler/linker flags/libs/defs:
  - CXX .......... : g++
  - CPPFLAGS ..... : 
  - CXXFLAGS ..... : -march=pentium3 -pipe -fomit-frame-pointer -O2 
  - LDFLAGS ...... : 
  - LIBS ......... : -llapack  -lcblas -lblas -latlas -lfftw3 -lm   -L/usr/lib/g
cc/i686-pc-linux-gnu/3.4.4 -L/usr/lib/gcc/i686-pc-linux-gnu/3.4.4/../../../../i6
86-pc-linux-gnu/lib -L/usr/lib/gcc/i686-pc-linux-gnu/3.4.4/../../.. -lfrtbegin -
lg2c -lm -lgcc_s

------------------------------------------------------------------------------
Now type 'make && make install' to build and install itpp-3.9.1 library
------------------------------------------------------------------------------

Now, it is time for compiling and linking the IT++ library. To do so,
please simply run the following command:

  % make

IT++ should compile without any errors or warnings. If this is not the
case, please submit a bug-report on the IT++ project page on SourceForge.
Please include information about your OS, compiler version, external
libraries and their versions, etc.

It is recommended that you check if your library has been compiled and
linked properly and works as expected. To do so, you should execute the
testing process:

  % make check

As a result, you should obtain a similar report:

------------------------------------------------------------------------------
Test `array_test' PASSED.
------------------------------------------------------------------------------
Test `bch_test' PASSED.
------------------------------------------------------------------------------
Test `bessel_test' PASSED.
------------------------------------------------------------------------------
Test `cholesky_test' PASSED.
------------------------------------------------------------------------------
Test `circular_buffer_test' PASSED.
------------------------------------------------------------------------------

[...]

------------------------------------------------------------------------------
Test `rec_syst_conv_code_test' PASSED.
------------------------------------------------------------------------------
Test `sigfun_test' PASSED.
------------------------------------------------------------------------------
Test `source_test' PASSED.
------------------------------------------------------------------------------
Test `sparse_test' PASSED.
------------------------------------------------------------------------------
Test `stat_test' PASSED.
------------------------------------------------------------------------------
Test `svd_test' PASSED.
------------------------------------------------------------------------------
Test `timer_test' PASSED.
------------------------------------------------------------------------------
Test `transforms_test' PASSED.
------------------------------------------------------------------------------
Test `turbo_test' PASSED.
------------------------------------------------------------------------------
Test `vec_test' PASSED.
------------------------------------------------------------------------------
Test `vector_test' PASSED.
------------------------------------------------------------------------------


Finally, you should install the compiled and linked library, include files
and HTML documentation (optionally) by typing:

  % make install

Depending on the PREFIX settings during configuration, you might need the
root (administrator) access to success with this step.

Eventually, you might invoke the following command

  % make clean

to remove all files created during compilation process, or even

  % make distclean

to remove all files generated by the `configure' script.

