/*!
\page installation IT++ Installation

\section requirements IT++ Requirements

IT++ should compile without errors or warnings on most GNU/Linux systems
and on most other UNIX like systems like Solaris, Mac OS X, or Cygwin. It
is possible to compile IT++ on Windows NT/2000/XP using Microsoft's Visual
C++ .NET. For Linux, Unix, Cygwin and Mac OS X systems we assume that you
have at least the following GNU software installed on your computer:

<ul>
<li> GNU make, version 3.72.1 or later (to check version run <tt>`make
--version'</tt>) </li>   
<li> GCC - GNU Compilers Collection (gcc, g++ and g77), version 3.3.x or 
later (to check version run <tt>`gcc --version'</tt>) </li> 
</ul>

Optionally, you might need additional tools like: Doxygen, LaTeX, Dvips
and Ghostscript to generate the HTML documentation.

We strongly recommend that you use well tested and stable releases of the
GCC compilers, i.e. 3.4.x, 3.3.x or 3.2.x, if possible. We do not actively
work on supporting older compilers and they may therefore (without prior
notice) become unsupported in future versions of IT++.

In order to use all functionality provided in the IT++ library it is
recommended that you have some external libraries compiled and installed
on your computer. The most important are FFTW, ATLAS (or CBLAS) and LAPACK
(optionally Intel Math Kernel Library as a replacement of these). It is
possible to compile and use IT++ without these libraries, but the
functionality will be reduced. We therefore recommend that you take some
time and effort to provide these external libraries in your system. Please
note, that some of them (FFTW, LAPACK) are usually included in the most
modern Linux distributions.


\section download Obtaining the IT++ Source Codes

IT++ is released under the GNU General Public License (GPL) and hence the
source code of the IT++ library is available for free download. To obtain
the IT++ source code, visit the IT++ project page on SourceForge:

<ul>
<li> <a href="http://sourceforge.net/projects/itpp/">
http://sourceforge.net/projects/itpp/ </a> </li>
</ul>

and download the file named \c itpp-\<VERSION\>.tar.gz, where \c
\<VERSION\> is the latest release number, e.g. 3.9.0.


\section compilation IT++ Configuration, Compilation and Installation

Assuming that you have already downloaded the latest IT++ sources, untar
and gunzip the sources, and enter the unpacked directory:

\code 
% gzip -cd itpp-<VERSION>.tar.gz | tar xvf - 
% cd itpp-<VERSION> 
\endcode

Since version 3.9.0, the IT++ library uses Autoconf/Automake tools for
configuration and Makefiles creation, so the compilation procedure
resembles a standard, well-known GNU method, i.e. 

\code 
% ./configure
% make
\endcode

The \c `configure' command can be invoked with additional switches and
options (run <tt>`./configure --help'</tt> to get a list of them). The
most important are:

<ul> 

<li> \c `--prefix=PREFIX' - set top installation directory to a certain \c
PREFIX value. By default it is set to \c `/usr/local', so <tt>`make
install'</tt> will install the package's files into \c
`/usr/local/include', \c `/usr/local/lib`, etc. </li>

<li> \c `--enable-debug' - switch to DEBUG mode by setting additional
debugging flags used by compiler and linker (disabled by default) </li>

<li> \c `--disable-html-docs' - do not generate and install HTML
documentation (enabled by default) </li>

<li> \c `--with-cpu=CPU' - enable optimization flags for a specific CPU:
\c `pentium3', \c `pentium4', \c `athlon-xp' or \c `sparc'. This option is
only used by GCC. </li>

</ul> 

By default, the \c `configure' script checks for a few external libraries
used by the IT++ library. These are: FFTW, ATLAS (CBLAS) and LAPACK. If
these libraries are found in your system, appropriate flags (i.e.
HAVE_FFTW, HAVE_CBLAS and HAVE_LAPACK) will be defined, and used during
the compilation and linking process.

If some of the external libraries are installed in a non-standard way in
your system, so they can not be detected by the `configure' script
automatically, you might use additional \c `--with-\<LIBNAME\>-dir' and \c
`--with-\<LIBNAME\>' switches, where \c \<LIBNAME\> is one of the
following: \c `fftw', \c `cblas', \c `lapack' or \c `haru'. For example:

<ul>

<li> \c `--with-fftw-dir=/home/user/lib' will add \c `-L/home/user/lib' to
the LDFLAGS environment variable, which is used during configuration and
linking </li>

<li> \c `--with-fftw=-lfftw3' will extend the default LIBS variable with
\c `-lfftw3' </li>

</ul>

Please run <tt>`./configure --help'</tt> to obtain a full list of \c
`--with-\<LIBNAME\>-dir' and \c `--with-\<LIBNAME\>' switches available.

Optionally, instead of using \c `--with-\<LIBNAME\>-dir' switches you can
set \c LDFLAGS environment variable before executing \c `configure'
command:

\code
% export LDFLAGS="-L/home/user/lib" 
% ./configure --with-fftw="-lfftw3"
\endcode

Although it is not recommended, you can intentionally prevent detection of
some external libraries. To do this you should use \c
`--without-\<LIBNAME\>' or \c `--with-\<LIBNAME\>=no', e.g.:

\code
% ./configure --without-cblas --without-lapack
\endcode

When the configuration process is finished a status message is briefly
presented. For instance, after having invoked the following configuration
command:

\code
% ./configure --enable-debug --with-cpu=pentium3
\endcode

one can observe something like that:

\verbatim
------------------------------------------------------------------------------
itpp-3.9.0 library configuration:
------------------------------------------------------------------------------

Directories:
  - prefix ....... : /usr/local
  - exec_prefix .. : ${prefix}
  - includedir ... : ${prefix}/include
  - libdir ....... : ${exec_prefix}/lib
  - docdir ....... : ${prefix}/share/doc/itpp-3.9.0

Platform:
  - CPU .......... : pentium3

Switches:
  - debug ........ : yes
  - html-docs .... : yes

Documentation tools:
  - Doxygen ...... : yes
  - LaTeX ........ : yes
  - Dvips ........ : yes
  - Ghostscript .. : yes

External libs:
  - MKL .......... : no
  - FFTW ......... : yes
  - ATLAS ........ : yes
  - CBLAS ........ : yes
  - LAPACK ....... : yes

Compiler/linker flags/libs/defs:
  - CXX .......... : g++
  - CPPFLAGS ..... : 
  - CXXFLAGS ..... : -march=pentium3 -ffast-math -mfpmath=sse -msse -Wall -g -DA
SSERT_LEVEL=2 
  - LDFLAGS ...... :    
  - LIBS ......... : -llapack -lcblas -lblas -latlas -lfftw3 -lm   -L/usr/lib/gc
c-lib/i686-pc-linux-gnu/3.3.6 -L/usr/lib/gcc-lib/i686-pc-linux-gnu/3.3.6/../../.
./../i686-pc-linux-gnu/lib -L/usr/lib/gcc-lib/i686-pc-linux-gnu/3.3.6/../../.. -
lfrtbegin -lg2c -lm -lgcc_s

------------------------------------------------------------------------------
Now type 'make && make install' to build and install itpp-3.9.0 library
------------------------------------------------------------------------------
\endverbatim

Now, it is time for compiling and linking the IT++ library. To do so,
please simply run the following command:

\code
% make
\endcode

IT++ should compile without any errors or warnings. If this is not the
case, please submit a bug-report on the IT++ project page on SourceForge.
Please include information about your OS, compiler version, external
libraries and their versions, etc.

Finally, you should install the compiled and linked library, include files
and HTML documentation (optionally) by typing:

\code
% make install
\endcode

Depending on the \c PREFIX settings during configuration, you might need
the root (administrator) access to success with this step.

Eventually, you might invoke the following command

\code
% make clean
\endcode

to remove all files created during compilation process, or even

\code
% make distclean
\endcode

to remove all files generated by the \c `configure' script.


\section macosx Instructions for Mac OS X

To compile and use IT++ under Mac OS X, you should  install the latest
version of Apple's developer tools. The tools are delivered with Mac OS X,
but you may need to unpack them. Problems have been encountered with
Apple's GCC version 2.95.2 and 3.1. However, with Apple's version GCC 3.3
which can be downloaded from Apple, IT++ has compiled successfully.

BLAS and LAPACK support is obtained with the \c vecLib framework, but you
must then use Apple's GCC compiler. Hence, only FFTW and HARU are then
needed to be installed externally.


\section visualcpp Instructions for Microsoft Visual C++ .NET using Intel MKL

You need to perform the following tasks in order to compile IT++ with
Microsoft Visual C++ .NET together with Intel Math Kernel Library (MKL):
<ul>
<li>Install MKL</li>
<li>Ensure that the windows' \c PATH variable includes the folder
<tt>"C:\Program Files\Intel\MKL\ia32\bin"</tt> (or the folder where you
have installed MKL). This is required for Windows to find the MKL dll
files. Setting the \c PATH variable can be done via the settings in
<tt>"Control Panel/Advanced/Environment Variables"</tt>. Note that there
are \c PATH variables for both the user and the system. Make sure that
they both contain the MKL directory. Alternatively you can copy all MKL
dll files from <tt>"C:\Program Files\Intel\MKL\ia32\bin"</tt> to
<tt>"C:\windows\system32"</tt> where windows also will find them. Restart
the computer to make the PATH change valid. </li>
<li>Compile IT++. Note that \c LAPACK_NO_UNDERSCORE should be defined among
the preprocessor definitions (found in "project/properties/configuration
properties/CC++/Preprocessor/Preprocessor definitions").</li>
</ul>

The next step is to compile your program and link it with IT++ and MKL.
Observe that several things need to be correctly set up:
<ul>
<li>The IT++ include directory must be found. The settings for this are
found in the menu "tools/options/Projects/VC++ Directories/Include Files".
Add a path to <tt>{whatever}\\itpp\\include</tt>. </li>
<li>The IT++ library directory must be found. The settings for this are found
in the menu "tools/options/Projects/VC++ Directories/Library Files". Add a
path to <tt>{whatever}\\itpp\\lib</tt>. </li>
<li>The MKL library directory must be found. The settings for this are
found in the menu "tools/options/Projects/VC++ Directories/Library Files".
Add a path to <tt>"{whatever}\Intel\MKL\ia32\lib"</tt>. </li>
<li> Linking with IT++ and MKL must be set up. Do this by marking your
project and go to the menu "Project/properties/configuration
properties/CC++/Linker/Input/Additional Dependencies". There you need to
add "itplusplus_debug.lib" or "itplusplus.lib" depending on whether debug
or release mode are being used. Furthermore, you need to add
"mkl_c_dll.lib". </li>
</ul>

Please note that the project settings for your program must be made for
both the debug- and the release-mode.

Below is some information from the MKL-manual. Alternative 3 below is
recommended:

\code
// To use LAPACK and BLAS software you must link three libraries: an interface,
// LAPACK, and one of the processor specific kernels. Some possible variants:

// 1. cdecl interface for 32-bit processor static linking, LAPACK library,
// Pentium III processor kernel.
link myprog.obj mkl_c.lib mkl_lapack.lib mkl_p3.lib

// 2. CVF default interface for 32-bit processor static linking, LAPACK 
// library, Pentium 4 processor kernel.
link myprog.obj mkl_s.lib mkl_lapack.lib mkl_p4.lib

// 3. cdecl interface for 32-bit processor dynamic linking. DLL dispatcher
// will load the appropriate dll for the processor dynamic kernel.
link myprog.obj mkl_c_dll.lib

// 4. 64-bit processor static linking of LAPACK and kernel.
link myprog.obj mkl_lapack.lib mkl_itp.lib
\endcode


\section solaris Compiling shared versions of LAPACK and ATLAS under Solaris

If you work under Linux, your distribution should ship with static and
shared version of these libraries, it is not the case for
Solaris. When building these libraries from sources, you only get
static \c *.a files. In order to build a shared library, two steps
are required:
<ul>
<li> Compiling the code with the \c -fPIC flag </li>
<li> Building a \c *.so file with the \c -shared flag </li>
</ul>


\subsection sharedlapack Shared version of LAPACK

Edit the \c make.inc file and change the compilation flag to:
\code
OPTS = -O3 -fPIC
\endcode

We don't need a library there, the archive is enough.


\subsection sharedatlas Shared version of ATLAS

When you follow the process described above, you need to add \c -fPIC to
all of the compilation flags:
<ul>
<li> Enter F77 Link Flags  [$(F77FLAGS)]: -O3 -fPIC </li>
<li> Enter C Flags (CCFLAGS) [-dalign -fsingle -xO5 -native]: -O3 -fPIC </li>
<li> Then you can accept the defaults and the summary should be:
\code
F77 & FLAGS: /usr/local/gcc-3.3/bin/g77 -O -fPIC
FLINKER & FLAGS: g77 -O3 -fPIC
CC & FLAGS: gcc -O3 -fPIC
MCC & FLAGS: /usr/local/gcc-3.3/bin/gcc -O -fPIC
CLINKER & FLAGS: $(CC) $(CCFLAGS)
\endcode
</li>
</ul>

One more tip is to edit the \c Make.SunOS_PLATFORM file, check every thing
and modify the \c CDEFS variable :
\code
CDEFS = $(L2SIZE) $(INCLUDES) $(F2CDEFS) $(ARCHDEFS) -fPIC
\endcode

Follow the tips to build a complete \c liblapack.a. Now, we will build the
shared version of the libraries. For each \c *.a (\c libatlas.a, \c
libcblas.a, \c libf77blas.a, \c liblapack.a), do:
\code
% mkdir tmp
% cd tmp
% ar x ../libXYZ.a
% gcc -shared *.o -o../libXYZ.so
% cd ..
% rm -r tmp
\endcode

If you get link error, try to check if the \c .o has really been compiled
with the \c -fPIC flag.

*/
