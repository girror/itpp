/*! 
\page linking Linking with IT++

Since version 3.9.0, there are two convenient methods of linking your
programs with the IT++ library. The first one employs the \c
`pkg-config' command (see <a href="http://pkgconfig.freedesktop.org/">
http://pkgconfig.freedesktop.org/</a>), wheres the second one uses \c
`itpp-config' script. These methods are shortly described below.


\section pkgconfig Using the pkg-config command

pkg-config is a helper tool used when compiling applications and
libraries. It helps you insert the correct compiler and linker
options. The syntax of the \c `pkg-config' is as follows:

\code
% pkg-config <options> <library name>  
\endcode

For instance, assuming that you need to compile an IT++ based program
<tt>`my_prog.cpp'</tt>, you should use the following command:

\code
% g++ `pkg-config --cflags itpp` -o my_prog my_prog.cpp `pkg-config --libs itpp`
\endcode  

For more information see the `pkg-config' man pages.


\section itconfig Using the itpp-config script
\addindex itpp-config

IT++ provides a shell script called \c `itpp-config`, which is
installed by default in <tt>`$prefix/bin'</tt>
(<tt>`/usr/local/bin'</tt>) directory. It can be used to simplify
compilation and linking of IT++ based programs. The usage of this
script is quite similar to the usage of the \c `pkg-config' command.

Assuming that you need to compile the program <tt>`my_prog.cpp'</tt>
you can now do that with the following command:

\code
% g++ `itpp-config --cflags` -o my_prog my_prog.cpp `itpp-config --libs`
\endcode

A list of \c `itpp-config' options can be obtained by typing:

\code
% itpp-config --help
\endcode

which should print the following information:

\code
Usage: itpp-config [--prefix] [--exec-prefix] [--version] [--libs] [--cflags]
\endcode


\section dynamiclinking Using IT++ with dynamic linking

When using static linking some of the library routines in IT++ are
copied into your executable program. This can lead to unnecessary
large executables. To avoid having too large executable files you may
use dynamic linking instead. Dynamic linking means that the actual
linking is performed when the program is executed. This requires that
the system is able to locate the IT++ library file when your program
is being executed. If you install the IT++ library using a non-standard
prefix, the \c `LD_LIBRARY_PATH' environment variable might be used to
show the location of the library, e.g.:
\code
export LD_LIBRARY_PATH=<IT++ installation prefix>/lib:$LD_LIBRARY_PATH
\endcode

*/

=============================================
!!! The following parts has to be revised !!!
=============================================

\section matlab_load_and_save Information for Matlab users

In the IT++ \c matlab folder there are two m-files: \c `load_it.m' and
\c `save_it.m'.  These files are used for reading and writing IT++ data
files from and to Matlab. To ensure that Matlab finds these two files
you should add the following line to your \c ~/matlab/startup.m file:

\code
p=path; path(p,<Path to your IT++ directory>/matlab);
\endcode

\section linking_mkl Linking IT++ with Intels' MKL

If you are using Intels' MKL you can now link your programs with the
following flags:

\code
-L<ITPP_HOME>/lib -L<MKL_LIBDIR> -L<ITPP_EXTERNAL_HOME>/lib/<ARCH>/gcc<VERSION> -lit++ -lmkl_lapack -lmkl_<cpu> -lguide -lpthread -lit++external -lg2c
\endcode

Replace \c \<cpu\> above with \c `def' (without the quotes) if you
have a Pentium, Pentium Pro and Pentium II processor, with \c `p3'
(without the quotes) if you have a Pentium III processor, or with \c
`p4' (without the quotes) if you have a Pentium 4 processor.
