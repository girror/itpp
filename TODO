Things to do before releasing version 4.0.0
============================================

* Go through our current feature requests at SourceForge. There are
  interesting hints and patches posted by the IT++ users.


General improvements for the future
===================================

* Spped improvements:
  - revise the idea of shallow matrix views
  - possibly use external libraries for random number generation

* Possibly add linear programming (LP) in the form of an external library
  "lpsolve"

* Add routines for optimization
  - Use GSL for fminbnd (brent) and fminunc (BFGS)?
  - Add other routines from http://plato.asu.edu/guide.html and
    http://www.mat.univie.ac.at/~neum/glopt.html - LP, SDP, SOCP...  

* Support for existing wireless standards, e.g. GSM/GPRS, WCDMA, WLAN,
  WIMAX, etc. 

* IT++ interpreter


Specific features
=================

* Multi-dimensional arrays

* The member ">>" and "<< operators needs to be revised. The "<<" operator
  does not always match the ">>" one.

* Check the fastmath functions. It seems like they are not any faster
  than the ordinary math functions.

* Add support for Array<Mat<T> > and Array<Vec<T> > in itload.m and itsave.m

* Modify it-file so that a description field and comment fields are
  added

* Add possibility to change kernel generator

* Make a m-file load/saver (similar to it-file).

* Soft-in soft-out turbo decoder (Erik)

* Class for operation on index sets? (Erik)

* Revision of (scalar) modulators to use fast likelihood algebra and
  to take soft inputs (for higher order constellations) (Erik)

* Sparse matrix class:
  - should choose the transposed matrix also (for fast row access)? (Erik) 
  - is there any gain by maintaining the index vector sorted? (Erik)
  - add cout for Sparse_Vec and Sparse_Mat (Pal)

* GF2mat_dense class: (Erik)
  - There is probably potential for improving the efficiency of some
    of the matrix/vector multiplication operators.  (See specific
    comments in the code.)
     
  - Make the data representation dynamic to account for the
    possibility (?) that a short integer can store more than 16 bits.
    Or use "int" or "long int"?

  - Implement a general GF(2)-matrix class which offers the user a
    transparent interface (user does not need to know whether the
    sparse or the dense representation is used)?

* LDPC classes: (Erik)
  - Random matrix generation strategy is rather ad hoc but seems to
    work fairly well. Room for improvement?

  - Add more extensive information gathering functions.

  - Support for efficient encoding, using sparse representation of
    generator matrix

  - Support for structured parity check matrices

  - Optimizations in decoder? Implement suboptimum decoding schemes,
    e.g., min-sum?

  - In MGW-cycle removal algorithm, hardcode a binomial expansion of
    the adjacency matrix for higher powers to improve efficiency
